<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Echo's Blog</title>
    <description>你好，我是 Echo Han。我是一名运维工程师/奶爸/Ruby 爱好者。我不时在这里记录一些自己的想法。欢迎你与我交流。</description>
    <link>https://echohn.github.io/</link>
    <atom:link href="https://echohn.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 23 Jan 2021 21:11:34 +0800</pubDate>
    <lastBuildDate>Sat, 23 Jan 2021 21:11:34 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>修复 RubyMine 在 Alfred workflow 打开项目时，出现 yarn packages are out of date 的错误</title>
        <description>&lt;p&gt;近来发现 RubyMine 在启动项目的服务时，有时正常，有时候异常，异常就如下图所示（启动 rails s）：
&lt;img src=&quot;/img/in-post/16113234582855.jpg&quot; alt=&quot;16113234582855&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在直接启动 RubyMine 的时候是不会出现该问题的，但是通过 Alfred 的 jetbrains workflow 直接启动项目时会出现此现象。&lt;/p&gt;

&lt;p&gt;排查中发现，我在项目中实际用到的是 node 12, 但是在服务启动时，总是在调用 node 14。然而在 RubyMine 的偏好设置中指定 node 解释器版本并不能解决此问题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000160444-Wrong-node-version-used-when-running-from-run-after-update-to-Webstorm-2018-&quot;&gt;搜到一篇资料&lt;/a&gt;，在 RubyMine 启动时，它并不能加载到我配置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; 中的 PATH 信息。&lt;/p&gt;

&lt;p&gt;于是我 debug jetbrains workflow，发现它实际调用的是 JetBrains Toolbox 生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.scripts/bin/rubymine&lt;/code&gt; 脚本。&lt;/p&gt;

&lt;p&gt;因此只需要在这个脚本的 Shabang 下面添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source ~/.bash_profile&lt;/code&gt; 就解决了问题。&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2021/01/23/fix-rubymine-not-found-node/</link>
        <guid isPermaLink="true">https://echohn.github.io/2021/01/23/fix-rubymine-not-found-node/</guid>
        
        <category>Ruby</category>
        
        <category>RubyMine</category>
        
        
      </item>
    
      <item>
        <title>在 Ruby 中使用行注释生成 apiDoc</title>
        <description>&lt;p&gt;以前我试过很多生成 api 文档的方法。&lt;/p&gt;

&lt;p&gt;起初使用过 Markdown 独自维护一份文档，但是文档和代码不同步的话，会经常忘记更新。&lt;/p&gt;

&lt;p&gt;后来尝试过使用 rDoc、&lt;a href=&quot;http://sphinx-doc.org&quot;&gt;Sphinx&lt;/a&gt; 等工具对代码注释进行解析直接生成 api 文档，Sphinx 是一种基于 reStructuredText 格式的文档生成工具。&lt;/p&gt;

&lt;p&gt;最近发现了 &lt;a href=&quot;http://apidocjs.com&quot;&gt;apiDoc&lt;/a&gt; ，它相对于 Sphinx 来说，不用学习 rst 语法，学习成本更低，因此在新的项目中，我尝试使用 apiDoc 生成 api 文档。&lt;/p&gt;

&lt;p&gt;然而在 apiDoc 官网的示例中，Ruby 语言是通过多行注释的方式生成的的文档，如下面的例子。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=begin
@api {get} /user/:id Request User information
@apiName GetUser
@apiGroup User

@apiParam {Number} id Users unique ID.

@apiSuccess {String} firstname Firstname of the User.
@apiSuccess {String} lastname  Lastname of the User.
=end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是多行注释有很多缺点，它必须顶格书写，不能缩进，在代码中也不容易辨认。在&lt;a href=&quot;https://ruby-china.org/wiki/coding-style&quot;&gt;Ruby 风格指南&lt;/a&gt;中不推荐使用，也不符合我们团队的开发规范。&lt;/p&gt;

&lt;p&gt;于是我查看了 apiDoc 的源码，想看能否对其进行修改。很开心的是，我看到了它在源码中是这样进行的匹配。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * apidoc-core/lib/languages/rb.js
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// find document blocks between '=begin' and '=end'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docBlocksRegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/#&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*\*\u&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;ffff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?)\u&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;ffff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?(?:\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|=begin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;ffff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?)\u&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;ffff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?(?:\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;=end/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// remove not needed ' # ' and tabs at the beginning&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inlineRegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gm&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个正则看起来有点乱，分析一下。&lt;/p&gt;

&lt;iframe frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;283&quot; src=&quot;https://jex.im/regulex/#!embed=true&amp;amp;flags=m&amp;amp;re=%23%5C*%5C*%5Cuffff%3F(.%2B%3F)%5Cuffff%3F(%3F%3A%5Cs*)%3F%23%5C*%7C%3Dbegin%5Cuffff%3F(.%2B%3F)%5Cuffff%3F(%3F%3A%5Cs*)%3F%3Dend&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;可以看到，它在支持多行注释的同时，也支持另外一种行注释的方式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#**&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @api {get} /user/:id Request User information&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @apiName GetUser&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @apiGroup User&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# @apiParam {Number} id Users unique ID.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# @apiSuccess {String} firstname Firstname of the User.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @apiSuccess {String} lastname  Lastname of the User.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;因此问题解决。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;PS：&lt;/em&gt;&lt;/strong&gt; 在看到这个正则的时候，字符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\uFFFF&lt;/code&gt;引起了我的注意。我在 Unicode 码表中并未查到这个字符，于是我以为这个字符在 Javascript 中代表了某种特殊的涵义，但是查了一下，也没有查到结果。&lt;/p&gt;

&lt;p&gt;直到我在看到一篇&lt;a href=&quot;https://gxnotes.com/article/178667.html&quot;&gt;文章&lt;/a&gt;中引用的一段文字：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In effect, noncharacters can be thought of as application-internal private-use code points. Unlike the private-use characters discussed in Section 16.5, Private-Use Characters, which are assigned characters and which are intended for use in open interchange, subject to interpretation by private agreement, noncharacters are permanently reserved (unassigned) and have no interpretation whatsoever outside of their possible application-internal private uses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;U+FFFF and U+10FFFF. These two noncharacter code points have the attribute of being associated with the largest code unit values for particular Unicode encoding forms. In UTF-16, U+FFFF is associated with the largest 16-bit code unit value, FFFF16. U+10FFFF is associated with the largest legal UTF-32 32-bit code unit value, 10FFFF16. This attribute renders these two noncharacter code points useful for internal purposes as sentinels. For example, they might be used to indicate the end of a list, to represent a value in an index guaranteed to be higher than any valid character value, and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又看了一下代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Replace Linebreak with Unicode&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uffff&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;于是真相大白。&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2017/08/10/use-line-comment-with-apidoc-in-ruby-language/</link>
        <guid isPermaLink="true">https://echohn.github.io/2017/08/10/use-line-comment-with-apidoc-in-ruby-language/</guid>
        
        <category>Ruby</category>
        
        <category>apiDoc</category>
        
        
      </item>
    
      <item>
        <title>解决 Confluence 5.10 中文补丁导致的 web 界面 UI 错误</title>
        <description>&lt;p&gt;最近把公司原来用的 Confluence 从 3.4.5 升到了 5.10.7 。&lt;/p&gt;

&lt;p&gt;虽然这两个版本跨了六年，但是整个升级过程还是挺顺利的，就是麻烦了一些，根据官网要求，要按照 3.4.5 =&amp;gt; 3.5 =&amp;gt; 5.0 =&amp;gt; 5.10 这样一步步进行升级。&lt;/p&gt;

&lt;p&gt;然后在使用的时候发现了一些问题，花了不少时间排错。&lt;/p&gt;

&lt;p&gt;起初是发现无法发送通知邮件，虽然测试邮件可以成功发送，但是一直收不到通知邮件。&lt;/p&gt;

&lt;p&gt;后来 Google 了一下，大概了解是中文补丁导致的，卸载了中文补丁，果然可以收到邮件了。&lt;/p&gt;

&lt;p&gt;当时那个中文补丁是上网随便下的，于是我又从&lt;a href=&quot;https://translations.atlassian.com/dashboard/dashboard?lang=zh_CN&quot;&gt;官网&lt;/a&gt;下了一个，直接在插件页面上传上去，发现可以收到通知邮件了。&lt;/p&gt;

&lt;p&gt;但是发现首页的布局却出现了问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/confluence-ui-error.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开 web 控制台，发现报了一个错误。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Error] SyntaxError: Unexpected EOF
	（匿名函数） (batch.js:392)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跳到源代码看了一下，非常明显，那行多了一个换行符导致了代码解析出现了问题。&lt;/p&gt;

&lt;p&gt;既然是中文补丁导致的，那出错的代码肯定是在中文补丁里了。&lt;/p&gt;

&lt;p&gt;我打开了补丁包，试着过滤了一下代码的关键字。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip Confluence-5.10.0-rc1-language-pack-zh_CN.jar
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; start ./
.//atlassian-plugin.xml:    &amp;lt;resource &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i18n-101&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i18n&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com/atlassian/confluence/plugins/gettingstarted/i18n&quot;&lt;/span&gt;/&amp;gt;
.//com/atlassian/confluence/plugins/gettingstarted/i18n_zh_CN.properties:confluence.gettingstarted.movie&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;//www.atlassian.com/software/confluence/videos/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.html&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;果然发现了问题所在。&lt;/p&gt;

&lt;p&gt;于是将文件中多余的换行符去掉，重新打包。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar cvf ../Confluence-5.10.0-rc1-language-pack-zh_CN.jar ./&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;将修改后的中文补丁传上去，刷新主页面，咦，居然错误还在？&lt;/p&gt;

&lt;p&gt;不应该啊。。。尝试停用了浏览器的缓存。&lt;/p&gt;

&lt;p&gt;刷新页面，果然，恢复正常！&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/10/23/fix-confluence-chinese-pack-lead-to-web-ui-error/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/10/23/fix-confluence-chinese-pack-lead-to-web-ui-error/</guid>
        
        <category>Confluence</category>
        
        
      </item>
    
      <item>
        <title>批量导入密码到 iTerm 密码管理器</title>
        <description>&lt;p&gt;定期修改密码是非常常见的安全策略，我们这每隔几个月会将所有线上服务器的密码统一更新。&lt;/p&gt;

&lt;p&gt;起初我是将服务器密码直接存储在 Keychain 里。&lt;/p&gt;

&lt;p&gt;每次要登录服务器的时候，打开 Keychain，搜索相关服务器的信息，然后点击「将密码复制到剪贴板」，再回到终端里粘贴。&lt;/p&gt;

&lt;p&gt;当时觉得虽然不太方便，但是总比从 Excel 里粘密码要好吧。&lt;/p&gt;

&lt;p&gt;后来，iTerm 升到 3，多了一项密码管理器的功能。&lt;/p&gt;

&lt;p&gt;身为 iTerm 的重度使用者，我觉得这项功能真的超级实用。&lt;/p&gt;

&lt;p&gt;只要按下快捷键 ⌘ + P ，设定的关键字一输，密码就可以直接上屏。&lt;/p&gt;

&lt;p&gt;所以在我发现这个功能之后，我就把 Keychain 里所有常用服务器的密码都一条条粘到了 iTerm 里。&lt;/p&gt;

&lt;p&gt;然而，最近到了公司定期修改密码的日子，当系统组的同事拿着 U 盘过来找我的时候，想到又要一条条的粘，我的内心其实是崩溃的。&lt;/p&gt;

&lt;p&gt;我试着 Google ，但是并没有发现特别好将密码导入到 iTerm 的方法，于是我去 iTerm 的论坛发了&lt;a href=&quot;https://groups.google.com/forum/#!topic/iterm2-discuss/hrfJL7GA4ZA&quot;&gt;一张求助帖&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很快就有人回复了。&lt;/p&gt;

&lt;p&gt;因为 iTerm 中的密码也是存在 Keychain 的，可以通过命令行将密码添加到 Keychain ：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On Wednesday, October 19, 2016 at 9:10:07 PM UTC-4, Flare Han wrote:
Is there any way to import a lot of passwords to the Password Manager?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While googling a similar topic a couple months ago, I found&lt;/p&gt;

&lt;p&gt;Save the password in keychain, either by the GUI (see https://www.netmeister.org/blog/keychain-passwords.html) or:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;security add-generic-password &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; LDAPbindPW &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;your-password-goes-here&amp;gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The thing I was playing with at the time would have used the above via something like this in my .bashrc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LDAP_PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;security find-generic-password &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; LDAPbindPW &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also found you can use variations of the security command to list and see what passwords iTerm2 has created.
From that, you can figure out how to use a security command to create/update what iTerm2 uses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;security add-generic-password &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; iTerm2 &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; /Applications/iTerm.app &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;hostname&amp;gt; &amp;lt;userid&amp;gt;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;userid'&lt;/span&gt;s password&amp;gt;&lt;span class=&quot;s1&quot;&gt;' -l '&lt;/span&gt;a label&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;iTerm2’s password manager shows the account name (the -a switch). So you don’t really need the -l label. The -l label makes it easier to see in Keychain Access.&lt;/p&gt;

&lt;p&gt;于是我写了个脚本将密码表导进了 iTerm 。&lt;/p&gt;

&lt;p&gt;其实 iTerm 的密码管理器仍有需要改进的地方，比如它不支持类似 Sublime Text 中的全文匹配，不能跳着输入，所以要输入 ops@zone-application-server 这种名字很长的超麻烦。&lt;/p&gt;

&lt;p&gt;我只能给每组账号都设置了一个关键字用来进行快速输入，比如上面这条记录可缩写为 zasop 。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby -w&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# data csv format&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# jcjz,bj,user1,user1_password,user2,user2_password,...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# command&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# security add-generic-password -U -s iTerm2 -T /Applications/iTerm.app -a 'user' -w 'password'&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pathname'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'csv'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItermPassword&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@long_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;short_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@short_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;short_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@long_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;short_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@users_and_passwordes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;COMMAND_PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;security add-generic-password -U -s iTerm2 -T /Applications/iTerm.app&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COMMAND_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -a '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@short_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@long_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' -w '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/'/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_pass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@users_and_passwordes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;write_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;iterm_passes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ItermPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;iterm_passes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;（修改于 2017.04.02）&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/10/22/import-passwords-to-iterm-password-management/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/10/22/import-passwords-to-iterm-password-management/</guid>
        
        <category>Mac</category>
        
        <category>iTerm</category>
        
        
      </item>
    
      <item>
        <title>尝试提高 ZSH 的响应速度</title>
        <description>&lt;p&gt;事情的起因是某一天我突然发现，我的 zsh 怎么这么卡？&lt;/p&gt;

&lt;p&gt;以前实在没在意 zsh 的响应速度，但是一旦注意到，就开始各种接受不了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打开一个 iTerm 标签页需要十几秒？&lt;/li&gt;
  &lt;li&gt;cd 一个目录需要一到两秒才有响应？&lt;/li&gt;
  &lt;li&gt;ls 一个目录要返回结果一两秒后才能操作？&lt;/li&gt;
  &lt;li&gt;^C 结束进程反而卡在这不动？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我想到最近机器做过的变更实在太多。升级 macOS Sierra，iTerm 升级，oh-my-zsh 更新，实在有太多东西可能导致速度下降了。&lt;/p&gt;

&lt;p&gt;然而 Google 实在搜不到相关升级会导致 zsh 卡顿的结果。&lt;/p&gt;

&lt;p&gt;甚至我还想到可能是本子用的时间太长，ssd 读写速度下降导致的 zsh 卡顿。。。&lt;/p&gt;

&lt;p&gt;我怎么用怎么觉得不爽，再也无心他事，直接扑在了改进 zsh 的速度上面。&lt;/p&gt;

&lt;p&gt;我谷歌了很多资料，zsh 太慢的问题被很多人抱怨过，在此过程中我也学会了使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh -xv&lt;/code&gt; 命令调试 zsh 。&lt;/p&gt;

&lt;p&gt;我发现启动和运行过慢的原因有四点。&lt;/p&gt;

&lt;p&gt;第一，加载过多了插件。&lt;/p&gt;

&lt;p&gt;可能当我刚开始尝试用 oh-my-zsh 的时候，我参考了网上许多文章，加载了很多我用不到的插件。比如我同时开启了 z 和 autojump ，这两个插件的作用是一样的。在每次切换目录的时候，它们都会分别将切换的信息记入自己的数据库以进行权重统计，所以同时开启在一定程度上影响着 prompt 的响应速度。&lt;/p&gt;

&lt;p&gt;在我关闭了许多自己用不到的插件之后， 明显速度提升了一些，但还不是非常明显。&lt;/p&gt;

&lt;p&gt;第二，某些响应卡顿的命令明显影响 zsh 启动速度。&lt;/p&gt;

&lt;p&gt;我使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh -xv&lt;/code&gt; 命令调试 zsh 的时候发现，每次启动当加载到了某些插件，比如 autojump，执行到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew --prefix&lt;/code&gt;命令的时候会有非常明显的卡顿。 而在加载过程中，不止一次会调用到这个命令。&lt;/p&gt;

&lt;p&gt;所以我将所有插件中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew --prefix&lt;/code&gt;都替换回了它的结果&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;，我觉得我并不会轻易改动 brew 的安装目录。修改之后，zsh 的启动时间从十几秒直接缩减到了 3.5 秒。&lt;/p&gt;

&lt;p&gt;可以用下面这条命令测量 zsh 的启动时间。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usr/bin/time /bin/zsh -i -c exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三，所用主题的 prompt 功能会非常影响 prompt 的响应速度，尤其是 git prompt&lt;/p&gt;

&lt;p&gt;我根据自己的使用习惯，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;agnoster&lt;/code&gt; 主题之上做了一些修改，添加了一些逻辑。在这次事件发生后，我读了一下主题的源码，做了一些优化。&lt;/p&gt;

&lt;p&gt;比如，把类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $var |sed ...&lt;/code&gt; 等造成多进程开销的命令都使用 Bash 内部替换代替（详见&lt;a href=&quot;http://echohn.github.io/2016/05/21/bash-style-guide-cn/&quot;&gt;我翻译的这篇文章&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;而且这次我发现主题中的 git prompt 逻辑会非常影响 prompt 的响应速度。尤其是判断 git 中的版本有没有未提交的文件等状态的相关命令。我在测试的时候，将其替换成一个只显示 git 分支，不显示其他状态的 git prompt，其响应速度直接提升到让我满意的程度。&lt;/p&gt;

&lt;p&gt;在这次 zsh 的卡顿事件中，在功能和性能之间，我最终做出了妥协，去掉了一些用不到功能和插件，换来一个我能接受的性能提升。&lt;/p&gt;

&lt;p&gt;至于为什么不切换成速度更快的 fish，我考虑到我毕竟是做运维的，还是使用跟服务器上自带的 Bash 更相似一些的 zsh 为好。&lt;/p&gt;

&lt;p&gt;这次我顺便还了解了 Antigen 、Antibody 等工具，和几个很实用、有意思的插件。&lt;/p&gt;

&lt;p&gt;但是我还是没有使用 Antibody，我感觉它能支持的插件还是太少，当然这也可能是我对其了解的太浅显了。&lt;/p&gt;

&lt;p&gt;最后为了缓解自己在 zsh 加载时候的焦虑心情，我做了一个 Loading 的命令行动画。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ScreenFlow.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挺有意思的吧！&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/10/01/about-improve-zsh-response-speed/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/10/01/about-improve-zsh-response-speed/</guid>
        
        <category>Mac</category>
        
        <category>ZSH</category>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>「时间管理」读书笔记</title>
        <description>&lt;p&gt;今天读了「&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22494362&quot;&gt;你知道吗？每个时间管理方法都只适合解决某一类问题&lt;/a&gt;」这篇文章，觉得很受用。&lt;/p&gt;

&lt;p&gt;正好我正想系统化的梳理一下之前学习过的时间管理相关资料，就以此文章为基础，先做一篇读书笔记。&lt;/p&gt;

&lt;p&gt;对于这篇文章中所提到的「生命之花」和「晨间日记」我之前并不是很了解，所以在笔记中做了一些拓展。&lt;/p&gt;

&lt;p&gt;以后如果有时间，我再把之前学过的其他时间管理的知识总结到这里。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/echohn/my-mindmap/blob/master/时间管理.pdf&quot;&gt;点击这里查看&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/10/01/the-reading-note-of-time-management/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/10/01/the-reading-note-of-time-management/</guid>
        
        <category>时间管理</category>
        
        
      </item>
    
      <item>
        <title>使用 cloc 统计你的代码量</title>
        <description>&lt;p&gt;今天发现一个特别好用的工具 &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;cloc&lt;/a&gt;，可以用它统计代码的行数。它可以识别多种开发语言，并在计算的时候忽略掉注释和空行。&lt;/p&gt;

&lt;p&gt;我记得我上次申请软件著作权的时候，申请表格中要求提交代码量，当时为了计算行数，我写了类似于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find xxx -prune xxx | xargs grep -vE xxx | wc -l&lt;/code&gt; 的超长命令。&lt;/p&gt;

&lt;p&gt;每年写年终总结统计工作量的时候，我也常常会用到类似的命令。&lt;/p&gt;

&lt;p&gt;所以我今天突然发现这个工具的时候，还是很惊喜的。&lt;/p&gt;

&lt;p&gt;在 macOS 上，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install cloc&lt;/code&gt; 来安装它，它支持包括 Windows 在内的多个系统。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; cloc                    &lt;span class=&quot;c&quot;&gt;# https://www.npmjs.com/package/cloc&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc              &lt;span class=&quot;c&quot;&gt;# Debian, Ubuntu&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                  &lt;span class=&quot;c&quot;&gt;# Red Hat, Fedora&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                  &lt;span class=&quot;c&quot;&gt;# Fedora 22 or later&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; cloc                    &lt;span class=&quot;c&quot;&gt;# Arch&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                  &lt;span class=&quot;c&quot;&gt;# FreeBSD&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;port &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                 &lt;span class=&quot;c&quot;&gt;# Mac OS X with MacPorts&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                      &lt;span class=&quot;c&quot;&gt;# Mac OS X with Homebrew&lt;/span&gt;
choco &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloc                     &lt;span class=&quot;c&quot;&gt;# Windows with Chocolatey&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;它有诸多优点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载安装方便。&lt;/li&gt;
  &lt;li&gt;能识别多种语言。&lt;/li&gt;
  &lt;li&gt;允许通过项目或语言等多种方式来输出统计结果。&lt;/li&gt;
  &lt;li&gt;多种输出格式，包括纯文本、SQL、JSON、XML、YAML 等。&lt;/li&gt;
  &lt;li&gt;能直接从压缩包里统计代码。&lt;/li&gt;
  &lt;li&gt;多种排错选项。&lt;/li&gt;
  &lt;li&gt;识别含有非常用字符和空格的文件、目录名。&lt;/li&gt;
  &lt;li&gt;没有外部依赖。&lt;/li&gt;
  &lt;li&gt;可在多种系统上运行。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于它出色的灵活性，可以和多种工具结合使用。&lt;/p&gt;

&lt;p&gt;比如写一个 &lt;a href=&quot;http://stackoverflow.com/questions/26881441/can-you-get-the-number-of-lines-of-code-from-a-github-repository&quot;&gt;cloc-git&lt;/a&gt; 的脚本，用来统计 git 远程项目的代码量。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; temp-linecount-repo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;('temp-linecount-repo' will be deleted automatically)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  cloc temp-linecount-repo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; temp-linecount-repo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cloc-git https://github.com/rails/rails.git
Cloning into &lt;span class=&quot;s1&quot;&gt;'temp-linecount-repo'&lt;/span&gt;...
remote: Counting objects: 3615, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3048/3048&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Total 3615 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 174&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 1576 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3615/3615&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 6.08 MiB | 2.28 MiB/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;174/174&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Checking connectivity... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'temp-linecount-repo'&lt;/span&gt; will be deleted automatically&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


    3043 text files.
    2893 unique files.
     309 files ignored.

github.com/AlDanial/cloc v 1.70  &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;19.61 s &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;141.1 files/s, 18560.1 lines/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
Language                     files          blank        comment           code
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
Ruby                          2152          47525          41996         213275
Markdown                        74          13832              0          34880
JavaScript                      23            732            747           3385
YAML                           144            307            584           2505
ERB                            318            248             11           1736
CSS                             20            157            120           1105
CoffeeScript                    11             87            104            318
HTML                            19             15              3            198
yacc                             1              4              0             45
SQL                              1              6              0             43
JSON                             1              0              0             24
builder                          2              0              0              6
DTD                              1              0              0              1
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
SUM:                          2767          62913          43565         257521
&lt;span class=&quot;nt&quot;&gt;-------------------------------------------------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;cloc 也支持使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--diff&lt;/code&gt; 选项对两个版本的代码量进行比较。&lt;/p&gt;

&lt;p&gt;但是在我尝试 cloc 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--diff&lt;/code&gt; 选项比较文件并输出结果的时候， 我发现了一个问题，cloc 输出的 yaml 或 json 文件内容是不正确的。如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# github.com/AlDanial/cloc&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;header &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;same &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CSS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;files_count &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blank &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;comment &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JavaScript&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;files_count &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;38&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blank &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;comment &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;131&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2177&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;language &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HTML&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;files_count &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blank &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;comment &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;182&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这是 diff 输出的 yaml 文件。注意 same 下面的 key 并不是根据开发语言区分的二级 Hash，而是所有结果都使用了同样的 key 名放在了一起。这样如果有其他工具读取输出文件，势必会导致前面同名 key 的值被后面的值覆盖。造成解析后会丢失绝大部分的报告内容。&lt;/p&gt;

&lt;p&gt;这个问题我已经在项目提交了&lt;a href=&quot;https://github.com/AlDanial/cloc/issues/127&quot;&gt;Issue&lt;/a&gt;，作者说过几天就将修复这个问题。&lt;/p&gt;

&lt;p&gt;最后统计了一下我最近在做的项目。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cloc .
     365 text files.
     339 unique files.
     225 files ignored.

github.com/AlDanial/cloc v 1.70  T=9.31 s (16.3 files/s, 2338.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
YAML                             7             13             47          14366
JavaScript                      38              1            131           2177
Ruby                            72            396            728           1281
CoffeeScript                     7            148             29           1192
SASS                             4             34             19            347
ERB                             16             60              0            250
Markdown                         2            143              0            182
HTML                             3             15              3            182
CSS                              3              2             25              2
-------------------------------------------------------------------------------
SUM:                           152            812            982          19979
-------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最多的 YAML 代码是从业务库导出的基线数据。由于这是个基于 echarts 的业务数据可视化的项目，前端代码占的比重稍大了一点。&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Sep 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/09/24/use-cloc-to-count-your-code/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/09/24/use-cloc-to-count-your-code/</guid>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>升级到 macOS Sierra 之后踩到的坑 (持续更新)</title>
        <description>&lt;p&gt;本来没想这么早升级的，主要是之前看相关的消息，我以为新版本 GateKeeper 无法关闭，怕很多应用无法使用了。&lt;/p&gt;

&lt;p&gt;之后看到&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22537236&quot;&gt;《macOS Sierra 正式版升级须知一览》&lt;/a&gt;发现 GateKeeper 仍是可以通过命令行进行关闭的，这才放下心兴致勃勃的点了 Sierra 的下载。&lt;/p&gt;

&lt;p&gt;安装过程一切顺利，完成之后直接重置了 NVRAM。&lt;/p&gt;

&lt;p&gt;正常启动之后没有发现大的问题，比如 Homebrew 无法使用之类的。&lt;/p&gt;

&lt;p&gt;但仍然发现了一些小问题。&lt;/p&gt;

&lt;h2 id=&quot;坚果云导致-finder-使用右键菜单时崩溃已解决&quot;&gt;坚果云导致 Finder 使用右键菜单时崩溃(已解决)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/sierra-finder-crash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;起初我直觉以为是杀毒软件 ESET Cyber Security 引起的，因为 ESET 启动后明确提示不支持 Sierra ，并且在我删除 ESET 套件后也突然发现 Finder 右键可用了，但是重启后发现问题仍在。&lt;/p&gt;

&lt;p&gt;仔细看了看详细信息，发现崩溃信息中提到 NutstorePlugin，才确定是由坚果云导致的崩溃。&lt;/p&gt;

&lt;p&gt;在坚果云论坛搜到了这篇&lt;a href=&quot;http://bbs.jianguoyun.com/topic.php?id=6553&quot;&gt;帖子&lt;/a&gt;，其中官方提到可&lt;a href=&quot;https://www.jianguoyun.com/p/DTLhAzEQjof1BRjTohU&quot;&gt;下载最新的测试版本Mac客户端&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;更新之后问题解决。&lt;/p&gt;

&lt;h2 id=&quot;xtrafinder-剪切文件时候导致-finder-崩溃待解决&quot;&gt;XtraFinder 剪切文件时候导致 Finder 崩溃（待解决）&lt;/h2&gt;

&lt;p&gt;在升级 Sierra 之后，发现 Bartender 中的 Spotlight 图标无法隐藏（我还是习惯用 Alfred），并且打开 Finder 后发现 XtraFinder 没有加载。&lt;/p&gt;

&lt;p&gt;仍然是 SIP（System Integrity Protection）的问题。&lt;/p&gt;

&lt;p&gt;解决方法是开机 Command + R 进入恢复模式。&lt;/p&gt;

&lt;p&gt;点击实用工具打开终端，执行命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;csrutil enable --without debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启后发现 XtraFinder 可以加载了，但是当我尝试剪切文件的时候，发现 Finder 会闪退，看来 XtraFinder 还是与 Sierra 兼容性上存在问题。于是&lt;/p&gt;

&lt;p&gt;只能卸载 XtraFinder 等待更新了。&lt;/p&gt;

&lt;h2 id=&quot;bartender-图标位置错乱待解决&quot;&gt;Bartender 图标位置错乱（待解决）&lt;/h2&gt;

&lt;p&gt;发现本由 Bartender 掌管的菜单栏图标位置，在每次重启之后，都不大一样。&lt;/p&gt;

&lt;p&gt;据说这是由于 Sierra 也支持按住 Command 键拖动图标了引起的问题。&lt;/p&gt;

&lt;p&gt;只能等 Bartender 更新了。&lt;/p&gt;

&lt;h2 id=&quot;sar-命令被移除待解决&quot;&gt;sar 命令被移除（待解决）&lt;/h2&gt;

&lt;p&gt;这个还是在 &lt;a href=&quot;https://www.v2ex.com/t/308007&quot;&gt;V2EX&lt;/a&gt; 上看到的。&lt;/p&gt;

&lt;p&gt;sar（System Activity Reporter） 我在 Linux 上经常用它来分析网络性能。&lt;/p&gt;

&lt;p&gt;我试着在 homebrew 搜索 sar ，没找到。我又下了 sysstat 的源码包试着编译了一下，在编译的时候出错了。&lt;/p&gt;

&lt;p&gt;用 Google 搜索，发现已有人在项目 Issue 里提出&lt;a href=&quot;https://github.com/sysstat/sysstat/issues/74&quot;&gt;如何在 mac 上编译 sysstat&lt;/a&gt; ，但是开发者说因为他没用 mac ，所以也帮不上忙。&lt;/p&gt;

&lt;h2 id=&quot;itunes-桌面歌词插件-dynamiclyrics-无法使用已解决&quot;&gt;iTunes 桌面歌词插件 DynamicLyrics 无法使用（已解决）&lt;/h2&gt;

&lt;p&gt;我看该项目的 Github 中已经有人提了相关的 Issue, 等待作者更新吧。&lt;/p&gt;

&lt;p&gt;（2016年09月25日项目已更新，已可正常使用。）&lt;/p&gt;

&lt;h2 id=&quot;升级之后的感受&quot;&gt;升级之后的感受&lt;/h2&gt;

&lt;p&gt;这次升级，外观上几乎没有变化。&lt;/p&gt;

&lt;p&gt;（后续更新：刚发现通知中心变丑了。。。）&lt;/p&gt;

&lt;p&gt;剪切板同步、存储优化、和完全支持了 ES 6 的 Safari 10，都是让我特别惊喜的功能。&lt;/p&gt;

&lt;p&gt;部分功能没有想象中的好用，可能因为很多功能已经有很好的解决方案了。&lt;/p&gt;

&lt;p&gt;比如 Siri 除了记录提醒事项外，其他功能的效率并不比 Alfred 更高，而且中英文混说的时候识别率不高。&lt;/p&gt;

&lt;p&gt;中文输入法仍然不支持自定义双拼方案。&lt;/p&gt;

&lt;p&gt;自动解锁我之前一直用 Near Lock ，嗯，可能如果我有 Apple Watch 的话，也会觉得这个很酷吧。&lt;/p&gt;

&lt;p&gt;等我发现了其他问题，再继续更新这篇文章吧。&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/09/22/hit-the-pit-after-updated-osx-to-sierra/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/09/22/hit-the-pit-after-updated-osx-to-sierra/</guid>
        
        <category>Mac</category>
        
        
      </item>
    
      <item>
        <title>这两个月我在忙什么</title>
        <description>&lt;p&gt;转眼间有两个多月没有写一篇文章了。&lt;/p&gt;

&lt;p&gt;这两个多月，我一直在公司忙于开发一个给客户使用的数据可视化的项目。&lt;/p&gt;

&lt;p&gt;说起来我接到做这个项目的因为，是因为研发的同事实在太忙了，研发的 Boss 对业务说实在抽不出人手来做这个项目，所以这个项目落到运维来了。&lt;/p&gt;

&lt;p&gt;毕竟之前是一直写东西给自己人用，现在终于能写东西给客户用，我刚接到这个项目的时候还是很兴奋的。&lt;/p&gt;

&lt;p&gt;这个项目立项时有三个人，我负责项目进度和开发，还有研发的一位设计师和一位前端工程师。但是，因为他们实在太忙了，所以除了有必要找他们把控界面以外，这个项目其实只有我一个人在做。&lt;/p&gt;

&lt;p&gt;所以，我这段时间看上去还挺忙的。&lt;/p&gt;

&lt;p&gt;因为是由我自己把控项目进度，我对这个项目进度的焦虑感还挺少的，因为我很清楚自己开发的效率，每个任务都留了足够的时间。&lt;/p&gt;

&lt;p&gt;然而，我在这个项目中思考了一些以往自己可能没那么在意的事情。&lt;/p&gt;

&lt;h2 id=&quot;对于我对项目把控的缺点&quot;&gt;对于我对项目把控的缺点&lt;/h2&gt;

&lt;p&gt;我对项目把控属于典型的虎头蛇尾型。&lt;/p&gt;

&lt;p&gt;我往往在项目开始时，把任务分解的特别周到详细，我的项目计划书多次做为范例被领导分享给其他同事做参考。&lt;/p&gt;

&lt;p&gt;但是在项目中后期，项目进度就会渐渐失控，其主要原因就是我没有对他人的任务进度给予即时的监控。&lt;/p&gt;

&lt;p&gt;我总以为别人跟我一样，会认真的对待项目计划和 Deadline。开始我问他们，按照这个项目计划有问题吗，他们说放心吧，没问题。然后我就很放心的不管了。等到了共同的项目节点需要沟通的时候，结果往往是他们的任务还没有完成，进度还差很大一截。我猜这样的原因主要就是他们对别人的项目不重视，所以导致没有细读计划，不遵守 Deadline，甚至对自己的任务完不成时，也不提前做沟通。&lt;/p&gt;

&lt;p&gt;当然，还有一点，就是我对其他人的任务监控确实有待提高。只能说，多沟通吧。&lt;/p&gt;

&lt;p&gt;而且，我身为项目负责人，理应每周向上级汇报进度的，我后来也懒了。&lt;/p&gt;

&lt;h2 id=&quot;对于与需求方沟通&quot;&gt;对于与需求方沟通&lt;/h2&gt;

&lt;p&gt;这次，真的体会到了研发同事的苦。&lt;/p&gt;

&lt;p&gt;我发现在面对满脑子啥想法都没有的业务同事的时候，想保持一种平常心真的是挺难的。&lt;/p&gt;

&lt;p&gt;第一次与业务开项目碰头会的时候，我们大眼瞪小眼。接到任务的我，等着业务跟我详细的说说需求。接到会议通知的业务，以为我们拿到任务已经有一些实现的想法了要汇报给他们。&lt;/p&gt;

&lt;p&gt;然后在他们真正明白这次会议目的之后，就开始天南海北的胡扯，跑的都没边了。&lt;/p&gt;

&lt;p&gt;幸亏我人精人精的领导也参了会，及时给他们刹住了车，直到这时，我还处于懵逼的状态中。&lt;/p&gt;

&lt;p&gt;业务在产品出现之前，他们说的特别客气，时间挺紧的，功能实现了就行哈。待真的产品出来之后，就开始冷着脸各种挑刺了。&lt;/p&gt;

&lt;p&gt;对这我倒是表示理解，就像问一些男生你想找个什么样的女朋友？他说，诶呀，啥样的都行，是女的就行。&lt;/p&gt;

&lt;p&gt;他说不出来，因为他没有目标。&lt;/p&gt;

&lt;p&gt;但是让他说不喜欢什么的，他却恰恰能从各种细节跟你说出个百八十条。&lt;/p&gt;

&lt;p&gt;因为不喜欢什么，自己通常是很了解的，我觉得是一样的道理。&lt;/p&gt;

&lt;h2 id=&quot;对于接受与思考&quot;&gt;对于接受与思考&lt;/h2&gt;

&lt;p&gt;我是想事情想的很少那种人。&lt;/p&gt;

&lt;p&gt;我开始觉得业务的需求是需要尽量满足的，因为他们更贴近客户，他们的意见值得尊重。&lt;/p&gt;

&lt;p&gt;嗯，也是我审美水平太次，我对业务的意见挑不出毛病，我觉得他们的想法也行吧，也没啥不好的，改一下试试呗。&lt;/p&gt;

&lt;p&gt;但是跟我一块的还有一个非常具有审美水平的暴脾气设计师。&lt;/p&gt;

&lt;p&gt;他的原话是，信他们的就麻烦了，东一榔头，西一榔头，拍脑袋改，早晚玩完！&lt;/p&gt;

&lt;p&gt;当时我就夹在他们中间，我觉得好难过。&lt;/p&gt;

&lt;p&gt;一方面是对项目的责任感，一方面是答应了别人要实现，但是没有去做的惶恐感。&lt;/p&gt;

&lt;p&gt;这件事让我在公司和回家的时候都在思考怎么做，我也咨询了身为牛逼闪闪的前某公司首席需求分析师现在专心休假在家带孩子的老婆大人。&lt;/p&gt;

&lt;p&gt;老婆大人在鄙视了我公司业务的审美水准之后，教导我，以后定需求的时候，别说的那么死，可以说我回去再考虑一下嘛。&lt;/p&gt;

&lt;p&gt;其实后来想想，这事主要确实是我沟通方式不够圆通，另一方面是我对于类似的事情缺乏经验，思考的还是太少了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;总之，到节前，项目已经基本完成了。&lt;/p&gt;

&lt;p&gt;我因自己「太忙」找借口懒得更新的理由也没法再用了。&lt;/p&gt;

&lt;p&gt;还是要让自己忙起来，多看一些书，多学一些感兴趣的东西。毕竟，看到自己进步，还是挺有乐趣的。&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/09/16/what-did-i-do-in-these-months/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/09/16/what-did-i-do-in-these-months/</guid>
        
        <category>杂记</category>
        
        
      </item>
    
      <item>
        <title>如何自动备份 Safari 书签</title>
        <description>&lt;p&gt;今天上午美男子找我，「我 Safari 的书签突然全没啦，怎么办？」&lt;/p&gt;

&lt;p&gt;「你上次说买 &lt;a href=&quot;http://www.apple.com/cn/shop/product/ME177CH/A/airport-time-capsule-2tb?fnode=5f&quot;&gt;Time Capsule&lt;/a&gt; 后来买了吗？」&lt;/p&gt;

&lt;p&gt;「还没啊。」&lt;/p&gt;

&lt;p&gt;「那你试试登 iCloud 看看，我记得好像有恢复书签的功能。」&lt;/p&gt;

&lt;p&gt;过了一会，美男子告诉我，确实在 iCloud 里找到了恢复书签的选项，包括通讯录，日历和 iCloud Drive 的文件，iCloud 都有恢复的功能。&lt;/p&gt;

&lt;p&gt;这件事就这样结束了，然后我就在想，Safari 的书签是存在  ~/Library/Safari/Bookmarks.plist 里的，而 Safari 导出的书签实际上是一个 HTML 文件，其实写一个脚本就可以把书签自动备份了呀。&lt;/p&gt;

&lt;p&gt;(我写这个就是写着玩，我平时用 Time Capsule 做备份也用不着这个。。。)&lt;/p&gt;

&lt;p&gt;我尝试研究了一下，发现确实完全可行，但是发现了 Safari 的一个问题，Safari 在导入书签的时候，无法正确地识别&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;标签。而且只能解析与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签处在同一行的书签。&lt;/p&gt;

&lt;p&gt;这么说可能不易理解，我举例解释一下。&lt;/p&gt;

&lt;p&gt;正常 HTML 生成的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签应该是闭合的。如果在输出后的 HTML 文件不换行，是下面的样式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/DT&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这种情况下，Safari 会错误的把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;前面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/a&amp;gt;&lt;/code&gt;也解析成书签名，书签名会变成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;知乎&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果输出允许 indent，例如下面的样式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/DT&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;。。。Safari 根本就认不出来这个书签啦。&lt;/p&gt;

&lt;p&gt;我试验出的结果是，Safari 在导入书签的时候，只能识别出非闭合的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签，并且需要把书签放置在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签的同一行中，例如下面这样才能够正常的解析。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由于上面的问题，而且 xsltproc 将 xml 转换成 html 的时候，没法转换非闭合的标签，最后我在写脚本的时候，只能在导出 HTML 时，加了一个 sed 删除所有的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;标签，这真让强迫症痛苦。。。&lt;/p&gt;

&lt;p&gt;最后附上脚本。&lt;/p&gt;

&lt;p&gt;自动备份脚本的使用方法：&lt;/p&gt;

&lt;p&gt;将 「&lt;a href=&quot;https://gist.github.com/echohn/eb8f31165aa288a3d0de115ac11ee543&quot;&gt;备份脚本&lt;/a&gt; 」与「 &lt;a href=&quot;https://gist.github.com/echohn/4c5edcd8697b29cec9bafb36889e6953&quot;&gt;转换模板&lt;/a&gt; 」下载到同一目录，然后在 crontab 里添加执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCRIPT_PATH/backup_safari_bookmarks.sh OUTPUT_PATH&lt;/code&gt;即可,其中 OUTPUT_PATH 是书签备份将存放的目录，脚本执行之后，会在这个目录下生成一个文件名为当天日期的 HTML 书签文件。&lt;/p&gt;

&lt;p&gt;导入备份书签的方法：&lt;/p&gt;

&lt;p&gt;选择 Safari -&amp;gt; 文件 -&amp;gt; 导入自 -&amp;gt; 书签 HTML 文件…，然后选择最新的备份文件恢复即可。&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://echohn.github.io/2016/07/22/auto-backup-safari-bookmarks/</link>
        <guid isPermaLink="true">https://echohn.github.io/2016/07/22/auto-backup-safari-bookmarks/</guid>
        
        <category>Safari</category>
        
        <category>Mac</category>
        
        <category>script</category>
        
        
      </item>
    
  </channel>
</rss>
