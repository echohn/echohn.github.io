<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Echo&#39;s Blog</title>
    <description>你好，我是 Echo Han。我是一名运维工程师/奶爸/Ruby 爱好者。我不时在这里记录一些自己的想法。欢迎你与我交流。</description>
    <link>http://echohn.github.io/</link>
    <atom:link href="http://echohn.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 25 Sep 2016 21:50:16 +0800</pubDate>
    <lastBuildDate>Sun, 25 Sep 2016 21:50:16 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>使用 cloc 统计你的代码量</title>
        <description>&lt;p&gt;今天发现一个特别好用的工具 &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;cloc&lt;/a&gt;，可以用它统计代码的行数。它可以识别多种开发语言，并在计算的时候忽略掉注释和空行。&lt;/p&gt;

&lt;p&gt;我记得我上次申请软件著作权的时候，申请表格中要求提交代码量，当时为了计算行数，我写了类似于 &lt;code class=&quot;highlighter-rouge&quot;&gt;find xxx -prune xxx | xargs grep -vE xxx | wc -l&lt;/code&gt; 的超长命令。&lt;/p&gt;

&lt;p&gt;每年写年终总结统计工作量的时候，我也常常会用到类似的命令。&lt;/p&gt;

&lt;p&gt;所以我今天突然发现这个工具的时候，还是很惊喜的。&lt;/p&gt;

&lt;p&gt;在 macOS 上，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install cloc&lt;/code&gt; 来安装它，它支持包括 Windows 在内的多个系统。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install -g cloc                    &lt;span class=&quot;c&quot;&gt;# https://www.npmjs.com/package/cloc&lt;/span&gt;
sudo apt-get install cloc              &lt;span class=&quot;c&quot;&gt;# Debian, Ubuntu&lt;/span&gt;
sudo yum install cloc                  &lt;span class=&quot;c&quot;&gt;# Red Hat, Fedora&lt;/span&gt;
sudo dnf install cloc                  &lt;span class=&quot;c&quot;&gt;# Fedora 22 or later&lt;/span&gt;
sudo pacman -S cloc                    &lt;span class=&quot;c&quot;&gt;# Arch&lt;/span&gt;
sudo pkg install cloc                  &lt;span class=&quot;c&quot;&gt;# FreeBSD&lt;/span&gt;
sudo port install cloc                 &lt;span class=&quot;c&quot;&gt;# Mac OS X with MacPorts&lt;/span&gt;
brew install cloc                      &lt;span class=&quot;c&quot;&gt;# Mac OS X with Homebrew&lt;/span&gt;
choco install cloc                     &lt;span class=&quot;c&quot;&gt;# Windows with Chocolatey&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;它有诸多优点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载安装方便。&lt;/li&gt;
  &lt;li&gt;能识别多种语言。&lt;/li&gt;
  &lt;li&gt;允许通过项目或语言等多种方式来输出统计结果。&lt;/li&gt;
  &lt;li&gt;多种输出格式，包括纯文本、SQL、JSON、XML、YAML 等。&lt;/li&gt;
  &lt;li&gt;能直接从压缩包里统计代码。&lt;/li&gt;
  &lt;li&gt;多种排错选项。&lt;/li&gt;
  &lt;li&gt;识别含有非常用字符和空格的文件、目录名。&lt;/li&gt;
  &lt;li&gt;没有外部依赖。&lt;/li&gt;
  &lt;li&gt;可在多种系统上运行。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于它出色的灵活性，可以和多种工具结合使用。&lt;/p&gt;

&lt;p&gt;比如写一个 &lt;a href=&quot;http://stackoverflow.com/questions/26881441/can-you-get-the-number-of-lines-of-code-from-a-github-repository&quot;&gt;cloc-git&lt;/a&gt; 的脚本，用来统计 git 远程项目的代码量。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
git clone --depth 1 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; temp-linecount-repo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&#39;temp-linecount-repo&#39; will be deleted automatically)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  cloc temp-linecount-repo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  rm -rf temp-linecount-repo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cloc-git https://github.com/rails/rails.git
Cloning into &lt;span class=&quot;s1&quot;&gt;&#39;temp-linecount-repo&#39;&lt;/span&gt;...
remote: Counting objects: 3615, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3048/3048&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
remote: Total 3615 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 174&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 1576 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 52&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3615/3615&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 6.08 MiB | 2.28 MiB/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Resolving deltas: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;174/174&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;temp-linecount-repo&#39;&lt;/span&gt; will be deleted automatically&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


    3043 text files.
    2893 unique files.
     309 files ignored.

github.com/AlDanial/cloc v 1.70  &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;19.61 s &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;141.1 files/s, 18560.1 lines/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Ruby                          2152          47525          41996         213275
Markdown                        74          13832              0          34880
JavaScript                      23            732            747           3385
YAML                           144            307            584           2505
ERB                            318            248             11           1736
CSS                             20            157            120           1105
CoffeeScript                    11             87            104            318
HTML                            19             15              3            198
yacc                             1              4              0             45
SQL                              1              6              0             43
JSON                             1              0              0             24
builder                          2              0              0              6
DTD                              1              0              0              1
-------------------------------------------------------------------------------
SUM:                          2767          62913          43565         257521
-------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;cloc 也支持使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--diff&lt;/code&gt; 选项对两个版本的代码量进行比较。&lt;/p&gt;

&lt;p&gt;但是在我尝试 cloc 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--diff&lt;/code&gt; 选项比较文件并输出结果的时候， 我发现了一个问题，cloc 输出的 yaml 或 json 文件内容是不正确的。如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# github.com/AlDanial/cloc&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CSS&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;files_count&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JavaScript&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;files_count&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;38&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;131&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2177&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HTML&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;files_count&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;182&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这是 diff 输出的 yaml 文件。注意 same 下面的 key 并不是根据开发语言区分的二级 Hash，而是所有结果都使用了同样的 key 名放在了一起。这样如果有其他工具读取输出文件，势必会导致前面同名 key 的值被后面的值覆盖。造成解析后会丢失绝大部分的报告内容。&lt;/p&gt;

&lt;p&gt;这个问题我已经在项目提交了&lt;a href=&quot;https://github.com/AlDanial/cloc/issues/127&quot;&gt;Issue&lt;/a&gt;，作者说过几天就将修复这个问题。&lt;/p&gt;

&lt;p&gt;最后统计了一下我最近在做的项目。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cloc .
     365 text files.
     339 unique files.
     225 files ignored.

github.com/AlDanial/cloc v 1.70  T=9.31 s (16.3 files/s, 2338.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
YAML                             7             13             47          14366
JavaScript                      38              1            131           2177
Ruby                            72            396            728           1281
CoffeeScript                     7            148             29           1192
SASS                             4             34             19            347
ERB                             16             60              0            250
Markdown                         2            143              0            182
HTML                             3             15              3            182
CSS                              3              2             25              2
-------------------------------------------------------------------------------
SUM:                           152            812            982          19979
-------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最多的 YAML 代码是从业务库导出的基线数据。由于这是个基于 echarts 的业务数据可视化的项目，前端代码占的比重稍大了一点。&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/09/24/use-cloc-to-count-your-code/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/09/24/use-cloc-to-count-your-code/</guid>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>升级到 macOS Sierra 之后踩到的坑 (持续更新)</title>
        <description>&lt;p&gt;本来没想这么早升级的，主要是之前看相关的消息，我以为新版本 GateKeeper 无法关闭，怕很多应用无法使用了。&lt;/p&gt;

&lt;p&gt;之后看到&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22537236&quot;&gt;《macOS Sierra 正式版升级须知一览》&lt;/a&gt;发现 GateKeeper 仍是可以通过命令行进行关闭的，这才放下心兴致勃勃的点了 Sierra 的下载。&lt;/p&gt;

&lt;p&gt;安装过程一切顺利，完成之后直接重置了 NVRAM。&lt;/p&gt;

&lt;p&gt;正常启动之后没有发现大的问题，比如 Homebrew 无法使用之类的。&lt;/p&gt;

&lt;p&gt;但仍然发现了一些小问题。&lt;/p&gt;

&lt;h2 id=&quot;finder-&quot;&gt;坚果云导致 Finder 使用右键菜单时崩溃(已解决)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/sierra-finder-crash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;起初我直觉以为是杀毒软件 ESET Cyber Security 引起的，因为 ESET 启动后明确提示不支持 Sierra ，并且在我删除 ESET 套件后也突然发现 Finder 右键可用了，但是重启后发现问题仍在。&lt;/p&gt;

&lt;p&gt;仔细看了看详细信息，发现崩溃信息中提到 NutstorePlugin，才确定是由坚果云导致的崩溃。&lt;/p&gt;

&lt;p&gt;在坚果云论坛搜到了这篇&lt;a href=&quot;http://bbs.jianguoyun.com/topic.php?id=6553&quot;&gt;帖子&lt;/a&gt;，其中官方提到可&lt;a href=&quot;https://www.jianguoyun.com/p/DTLhAzEQjof1BRjTohU&quot;&gt;下载最新的测试版本Mac客户端&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;更新之后问题解决。&lt;/p&gt;

&lt;h2 id=&quot;xtrafinder--finder-&quot;&gt;XtraFinder 剪切文件时候导致 Finder 崩溃（待解决）&lt;/h2&gt;

&lt;p&gt;在升级 Sierra 之后，发现 Bartender 中的 Spotlight 图标无法隐藏（我还是习惯用 Alfred），并且打开 Finder 后发现 XtraFinder 没有加载。&lt;/p&gt;

&lt;p&gt;仍然是 SIP（System Integrity Protection）的问题。&lt;/p&gt;

&lt;p&gt;解决方法是开机 Command + R 进入恢复模式。&lt;/p&gt;

&lt;p&gt;点击实用工具打开终端，执行命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;csrutil enable --without debug
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启后发现 XtraFinder 可以加载了，但是当我尝试剪切文件的时候，发现 Finder 会闪退，看来 XtraFinder 还是与 Sierra 兼容性上存在问题。于是&lt;/p&gt;

&lt;p&gt;只能卸载 XtraFinder 等待更新了。&lt;/p&gt;

&lt;h2 id=&quot;bartender-&quot;&gt;Bartender 图标位置错乱（待解决）&lt;/h2&gt;

&lt;p&gt;发现本由 Bartender 掌管的菜单栏图标位置，在每次重启之后，都不大一样。&lt;/p&gt;

&lt;p&gt;据说这是由于 Sierra 也支持按住 Command 键拖动图标了引起的问题。&lt;/p&gt;

&lt;p&gt;只能等 Bartender 更新了。&lt;/p&gt;

&lt;h2 id=&quot;sar-&quot;&gt;sar 命令被移除（待解决）&lt;/h2&gt;

&lt;p&gt;这个还是在 &lt;a href=&quot;https://www.v2ex.com/t/308007&quot;&gt;V2EX&lt;/a&gt; 上看到的。&lt;/p&gt;

&lt;p&gt;sar（System Activity Reporter） 我在 Linux 上经常用它来分析网络性能。&lt;/p&gt;

&lt;p&gt;我试着在 homebrew 搜索 sar ，没找到。我又下了 sysstat 的源码包试着编译了一下，在编译的时候出错了。&lt;/p&gt;

&lt;p&gt;用 Google 搜索，发现已有人在项目 Issue 里提出&lt;a href=&quot;https://github.com/sysstat/sysstat/issues/74&quot;&gt;如何在 mac 上编译 sysstat&lt;/a&gt; ，但是开发者说因为他没用 mac ，所以也帮不上忙。&lt;/p&gt;

&lt;h2 id=&quot;itunes--dynamiclyrics-&quot;&gt;iTunes 桌面歌词插件 DynamicLyrics 无法使用（已解决）&lt;/h2&gt;

&lt;p&gt;我看该项目的 Github 中已经有人提了相关的 Issue, 等待作者更新吧。&lt;/p&gt;

&lt;p&gt;（2016年09月25日项目已更新，已可正常使用。）&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;升级之后的感受&lt;/h2&gt;

&lt;p&gt;这次升级，外观上几乎没有变化。&lt;/p&gt;

&lt;p&gt;（后续更新：刚发现通知中心变丑了。。。）&lt;/p&gt;

&lt;p&gt;剪切板同步、存储优化、和完全支持了 ES 6 的 Safari 10，都是让我特别惊喜的功能。&lt;/p&gt;

&lt;p&gt;部分功能没有想象中的好用，可能因为很多功能已经有很好的解决方案了。&lt;/p&gt;

&lt;p&gt;比如 Siri 除了记录提醒事项外，其他功能的效率并不比 Alfred 更高，而且中英文混说的时候识别率不高。&lt;/p&gt;

&lt;p&gt;中文输入法仍然不支持自定义双拼方案。&lt;/p&gt;

&lt;p&gt;自动解锁我之前一直用 Near Lock ，嗯，可能如果我有 Apple Watch 的话，也会觉得这个很酷吧。&lt;/p&gt;

&lt;p&gt;等我发现了其他问题，再继续更新这篇文章吧。&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/09/22/hit-the-pit-after-updated-osx-to-sierra/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/09/22/hit-the-pit-after-updated-osx-to-sierra/</guid>
        
        <category>Mac</category>
        
        
      </item>
    
      <item>
        <title>这两个月我在忙什么</title>
        <description>&lt;p&gt;转眼间有两个多月没有写一篇文章了。&lt;/p&gt;

&lt;p&gt;这两个多月，我一直在公司忙于开发一个给客户使用的数据可视化的项目。&lt;/p&gt;

&lt;p&gt;说起来我接到做这个项目的因为，是因为研发的同事实在太忙了，研发的 Boss 对业务说实在抽不出人手来做这个项目，所以这个项目落到运维来了。&lt;/p&gt;

&lt;p&gt;毕竟之前是一直写东西给自己人用，现在终于能写东西给客户用，我刚接到这个项目的时候还是很兴奋的。&lt;/p&gt;

&lt;p&gt;这个项目立项时有三个人，我负责项目进度和开发，还有研发的一位设计师和一位前端工程师。但是，因为他们实在太忙了，所以除了有必要找他们把控界面以外，这个项目其实只有我一个人在做。&lt;/p&gt;

&lt;p&gt;所以，我这段时间看上去还挺忙的。&lt;/p&gt;

&lt;p&gt;因为是由我自己把控项目进度，我对这个项目进度的焦虑感还挺少的，因为我很清楚自己开发的效率，每个任务都留了足够的时间。&lt;/p&gt;

&lt;p&gt;然而，我在这个项目中思考了一些以往自己可能没那么在意的事情。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;对于我对项目把控的缺点&lt;/h2&gt;

&lt;p&gt;我对项目把控属于典型的虎头蛇尾型。&lt;/p&gt;

&lt;p&gt;我往往在项目开始时，把任务分解的特别周到详细，我的项目计划书多次做为范例被领导分享给其他同事做参考。&lt;/p&gt;

&lt;p&gt;但是在项目中后期，项目进度就会渐渐失控，其主要原因就是我没有对他人的任务进度给予即时的监控。&lt;/p&gt;

&lt;p&gt;我总以为别人跟我一样，会认真的对待项目计划和 Deadline。开始我问他们，按照这个项目计划有问题吗，他们说放心吧，没问题。然后我就很放心的不管了。等到了共同的项目节点需要沟通的时候，结果往往是他们的任务还没有完成，进度还差很大一截。我猜这样的原因主要就是他们对别人的项目不重视，所以导致没有细读计划，不遵守 Deadline，甚至对自己的任务完不成时，也不提前做沟通。&lt;/p&gt;

&lt;p&gt;当然，还有一点，就是我对其他人的任务监控确实有待提高。只能说，多沟通吧。&lt;/p&gt;

&lt;p&gt;而且，我身为项目负责人，理应每周向上级汇报进度的，我后来也懒了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;对于与需求方沟通&lt;/h2&gt;

&lt;p&gt;这次，真的体会到了研发同事的苦。&lt;/p&gt;

&lt;p&gt;我发现在面对满脑子啥想法都没有的业务同事的时候，想保持一种平常心真的是挺难的。&lt;/p&gt;

&lt;p&gt;第一次与业务开项目碰头会的时候，我们大眼瞪小眼。接到任务的我，等着业务跟我详细的说说需求。接到会议通知的业务，以为我们拿到任务已经有一些实现的想法了要汇报给他们。&lt;/p&gt;

&lt;p&gt;然后在他们真正明白这次会议目的之后，就开始天南海北的胡扯，跑的都没边了。&lt;/p&gt;

&lt;p&gt;幸亏我人精人精的领导也参了会，及时给他们刹住了车，直到这时，我还处于懵逼的状态中。&lt;/p&gt;

&lt;p&gt;业务在产品出现之前，他们说的特别客气，时间挺紧的，功能实现了就行哈。待真的产品出来之后，就开始冷着脸各种挑刺了。&lt;/p&gt;

&lt;p&gt;对这我倒是表示理解，就像问一些男生你想找个什么样的女朋友？他说，诶呀，啥样的都行，是女的就行。&lt;/p&gt;

&lt;p&gt;他说不出来，因为他没有目标。&lt;/p&gt;

&lt;p&gt;但是让他说不喜欢什么的，他却恰恰能从各种细节跟你说出个百八十条。&lt;/p&gt;

&lt;p&gt;因为不喜欢什么，自己通常是很了解的，我觉得是一样的道理。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;对于接受与思考&lt;/h2&gt;

&lt;p&gt;我是想事情想的很少那种人。&lt;/p&gt;

&lt;p&gt;我开始觉得业务的需求是需要尽量满足的，因为他们更贴近客户，他们的意见值得尊重。&lt;/p&gt;

&lt;p&gt;嗯，也是我审美水平太次，我对业务的意见挑不出毛病，我觉得他们的想法也行吧，也没啥不好的，改一下试试呗。&lt;/p&gt;

&lt;p&gt;但是跟我一块的还有一个非常具有审美水平的暴脾气设计师。&lt;/p&gt;

&lt;p&gt;他的原话是，信他们的就麻烦了，东一榔头，西一榔头，拍脑袋改，早晚玩完！&lt;/p&gt;

&lt;p&gt;当时我就夹在他们中间，我觉得好难过。&lt;/p&gt;

&lt;p&gt;一方面是对项目的责任感，一方面是答应了别人要实现，但是没有去做的惶恐感。&lt;/p&gt;

&lt;p&gt;这件事让我在公司和回家的时候都在思考怎么做，我也咨询了身为牛逼闪闪的前某公司首席需求分析师现在专心休假在家带孩子的老婆大人。&lt;/p&gt;

&lt;p&gt;老婆大人在鄙视了我公司业务的审美水准之后，教导我，以后定需求的时候，别说的那么死，可以说我回去再考虑一下嘛。&lt;/p&gt;

&lt;p&gt;其实后来想想，这事主要确实是我沟通方式不够圆通，另一方面是我对于类似的事情缺乏经验，思考的还是太少了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;总之，到节前，项目已经基本完成了。&lt;/p&gt;

&lt;p&gt;我因自己「太忙」找借口懒得更新的理由也没法再用了。&lt;/p&gt;

&lt;p&gt;还是要让自己忙起来，多看一些书，多学一些感兴趣的东西。毕竟，看到自己进步，还是挺有乐趣的。&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/09/16/what-did-i-do-in-these-months/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/09/16/what-did-i-do-in-these-months/</guid>
        
        <category>杂记</category>
        
        
      </item>
    
      <item>
        <title>如何自动备份 Safari 书签</title>
        <description>&lt;p&gt;今天上午美男子找我，「我 Safari 的书签突然全没啦，怎么办？」&lt;/p&gt;

&lt;p&gt;「你上次说买 &lt;a href=&quot;http://www.apple.com/cn/shop/product/ME177CH/A/airport-time-capsule-2tb?fnode=5f&quot;&gt;Time Capsule&lt;/a&gt; 后来买了吗？」&lt;/p&gt;

&lt;p&gt;「还没啊。」&lt;/p&gt;

&lt;p&gt;「那你试试登 iCloud 看看，我记得好像有恢复书签的功能。」&lt;/p&gt;

&lt;p&gt;过了一会，美男子告诉我，确实在 iCloud 里找到了恢复书签的选项，包括通讯录，日历和 iCloud Drive 的文件，iCloud 都有恢复的功能。&lt;/p&gt;

&lt;p&gt;这件事就这样结束了，然后我就在想，Safari 的书签是存在  ~/Library/Safari/Bookmarks.plist 里的，而 Safari 导出的书签实际上是一个 HTML 文件，其实写一个脚本就可以把书签自动备份了呀。&lt;/p&gt;

&lt;p&gt;(我写这个就是写着玩，我平时用 Time Capsule 做备份也用不着这个。。。)&lt;/p&gt;

&lt;p&gt;我尝试研究了一下，发现确实完全可行，但是发现了 Safari 的一个问题，Safari 在导入书签的时候，无法正确地识别&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;标签。而且只能解析与&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签处在同一行的书签。&lt;/p&gt;

&lt;p&gt;这么说可能不易理解，我举例解释一下。&lt;/p&gt;

&lt;p&gt;正常 HTML 生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签应该是闭合的。如果在输出后的 HTML 文件不换行，是下面的样式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/DT&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这种情况下，Safari 会错误的把&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;前面的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/a&amp;gt;&lt;/code&gt;也解析成书签名，书签名会变成&lt;code class=&quot;highlighter-rouge&quot;&gt;知乎&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果输出允许 indent，例如下面的样式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/DT&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;。。。Safari 根本就认不出来这个书签啦。&lt;/p&gt;

&lt;p&gt;我试验出的结果是，Safari 在导入书签的时候，只能识别出非闭合的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签，并且需要把书签放置在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;标签的同一行中，例如下面这样才能够正常的解析。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DT&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.zhihu.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;知乎&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由于上面的问题，而且 xsltproc 将 xml 转换成 html 的时候，没法转换非闭合的标签，最后我在写脚本的时候，只能在导出 HTML 时，加了一个 sed 删除所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/dt&amp;gt;&lt;/code&gt;标签，这真让强迫症痛苦。。。&lt;/p&gt;

&lt;p&gt;最后附上脚本。&lt;/p&gt;

&lt;p&gt;自动备份脚本的使用方法：&lt;/p&gt;

&lt;p&gt;将 「&lt;a href=&quot;https://gist.github.com/echohn/eb8f31165aa288a3d0de115ac11ee543&quot;&gt;备份脚本&lt;/a&gt; 」与「 &lt;a href=&quot;https://gist.github.com/echohn/4c5edcd8697b29cec9bafb36889e6953&quot;&gt;转换模板&lt;/a&gt; 」下载到同一目录，然后在 crontab 里添加执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;SCRIPT_PATH/backup_safari_bookmarks.sh OUTPUT_PATH&lt;/code&gt;即可,其中 OUTPUT_PATH 是书签备份将存放的目录，脚本执行之后，会在这个目录下生成一个文件名为当天日期的 HTML 书签文件。&lt;/p&gt;

&lt;p&gt;导入备份书签的方法：&lt;/p&gt;

&lt;p&gt;选择 Safari -&amp;gt; 文件 -&amp;gt; 导入自 -&amp;gt; 书签 HTML 文件…，然后选择最新的备份文件恢复即可。&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/07/22/auto-backup-safari-bookmarks/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/07/22/auto-backup-safari-bookmarks/</guid>
        
        <category>Safari</category>
        
        <category>Mac</category>
        
        <category>script</category>
        
        
      </item>
    
      <item>
        <title>使用 FastNetMon + Grafana 打造可视化的 DDoS 安全告警系统</title>
        <description>&lt;p&gt;昨天被安全部拉去开会，我被安利了好多安全工具。&lt;/p&gt;

&lt;p&gt;我很喜欢其中一个叫做 &lt;a href=&quot;https://github.com/pavel-odintsov/fastnetmon&quot;&gt;&lt;strong&gt;FastNetMon&lt;/strong&gt;&lt;/a&gt; 的 DoS/DDoS 分析防御工具。&lt;/p&gt;

&lt;p&gt;它性能很高，支持多种抓包引擎。支持 ExaBGP 和外部脚本触发报警。FastNetMon 可以部署在旁路上，侦听从核心交换上镜像过来的流量（见下图）。当它发现受到攻击的时候，可以通过脚本通知管理员，在 BGP 上 Blocked 掉被攻击的 IP，或是通过脚本触发任何你能想到的其他操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/network_map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FastNetMon 也可以结合 BGP 协议，打造自动化的抗 DDoS 安全防御系统。当发现受到攻击的时候，通过在 BGP 上宣告 blocked 受到攻击的 IP 地址。从而将攻击转移到其他地点，保证本地的其他服务不受到 DDoS 攻击的影响。&lt;/p&gt;

&lt;p&gt;当然，在国内的环境，现实的问题在于，当你遭受攻击的时候，&lt;a href=&quot;http://zhihu.com/question/19581905/answer/37397087&quot;&gt;你其实什么都做不了&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;扯远了，今天我就介绍一下，如何把 FastNetMon 与 &lt;a href=&quot;http://grafana.org&quot;&gt;Grafana&lt;/a&gt; 结合起来，打造一个可视化的 DDoS 安全预警系统。&lt;/p&gt;

&lt;h2 id=&quot;fastnetmon&quot;&gt;1. 安装 FastNetMon&lt;/h2&gt;

&lt;p&gt;由于只是搭建一个实验环境，我把所有相关的组件都安装在一台 CentOS 6 的虚拟机上。&lt;/p&gt;

&lt;p&gt;FastNetMon 官方提供了便捷的安装脚本，这也是目前官方唯一推荐的安装方式。然而这个脚本有一些坑（后面会提到）。而 RPM 包的安装方式官方看来是&lt;a href=&quot;https://github.com/pavel-odintsov/fastnetmon/blob/master/docs/INSTALL_RPM_PACKAGES.md&quot;&gt;已经暂时放弃了&lt;/a&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://raw.githubusercontent.com/FastVPSEestiOu/fastnetmon/master/src/fastnetmon_install.pl -Ofastnetmon_install.pl 
perl fastnetmon_install.pl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;首先需要说明的是，使用这个脚本安装的时候，FastNetMon 官方会从运行的机器上收集一些系统的相关信息用于改进产品。如果你不希望被打扰，可以在脚本后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;--do-not-track-me&lt;/code&gt;参数阻止数据上传。&lt;/p&gt;

&lt;p&gt;FastNetMon 需要安装很多依赖组件，这个脚本的执行时间取决于你的网速。你可以趁这时候喝口水，起来活动一下身体，或跟你的妹子聊聊微信。你也可以通过跟踪安装日志 /tmp/fastnetmon_install.log 来查看安装的时候究竟做了什么。&lt;/p&gt;

&lt;p&gt;在我十几分钟的等待结束之后，fastnetmon 终于安装完成了。&lt;/p&gt;

&lt;p&gt;在这里，我不得不吐槽一下这个安装脚本。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;虽然在安装之后，屏幕上会输出 We created service fastnetmon for you. You could run it with command: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/fastnetmon start&lt;/code&gt; 但是粗心的官方忘记了给 /etc/init.d/fastnetmon 脚本加执行权，我在发现执行找不到脚本的时候发现了这个问题，自己加上了。&lt;/li&gt;
  &lt;li&gt;即使加上了，/etc/init.d/fastnetmon 这个脚本依赖于 daemonize ，然 daemonize 这个依赖包并没有安装，我自己通过 yum 装上了。&lt;/li&gt;
  &lt;li&gt;即使这个包装上了，启动的时候也显示成功启动，然后我发现进程并没有运行。查看日志，发现一条 [ERROR] FastNetMon is already running with pid: 3068 的错误。然而，我是第一次启动好不好！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/shuai.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我尝试自己改动了启动脚本，因为 fastnetmon 本身就支持 daemonize 模式，而且直接通过进程运行时生成的 pid 文件与通过启动的 pid 文件路径是一样的，所以可以直接修改 /etc/init.d/fastnetmon 脚本，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt;函数替换成如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;start&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;$&quot;Starting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROGNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$FASTNETMON&lt;/span&gt; --daemonize
        &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# add pretty error messages&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;echo_success
        &lt;span class=&quot;k&quot;&gt;else
            &lt;/span&gt;echo_failure
        &lt;span class=&quot;k&quot;&gt;fi
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RETVAL&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在通过脚本启动关闭就是正常的了。&lt;/p&gt;

&lt;p&gt;之前说过，FastNetMon 支持多种抓包引擎。有像 pf_ring、netmap、pcap 这种 mirror capture, 也支持 netflow 和 sflow。FastNetMon 的作者 Pavel Odintsov 做过这些抓包引擎的性能对比：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/mirror-performance.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样，我也找到&lt;a href=&quot;http://prod.sandia.gov/techlib/access-control.cgi/2015/159378r.pdf&quot;&gt;这篇测试报告&lt;/a&gt;,其中有 pf_ring zc 和 netmap 的性能对比。&lt;/p&gt;

&lt;p&gt;由于 netmap 需要单独安装。在这里我将介绍使用 pf_ring 作为抓包引擎进行实验。你也可以选择 pcap，如果作为实验环境，它的兼容性是最好的。&lt;/p&gt;

&lt;h2 id=&quot;pfring--fastnetmon-&quot;&gt;2. 使用 pf_ring 作为 FastNetMon 的抓包引擎&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;这部分是讲我是怎么填坑的。如果你只是做测试，可以选择 pcap 引擎，忽略这一部分。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;FastNetMon 在安装的时候，已经安装了 pf_ring 。&lt;/p&gt;

&lt;p&gt;首先编辑文件 /etc/fastnetmon.conf，将 mirror 的值改为 on ，这将使用 pf_ring 作为抓包引擎。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# PF_RING traffic capture, enough fast but wire speed version need paid license
mirror = on

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同时，可以顺便把报警阈值调小一点，方便后面测试攻击。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Limits for Dos/DDoS attacks
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;threshold_pps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;threshold_mbps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;threshold_flows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;350&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在就可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/fastnetmon start&lt;/code&gt; 来启动 FastNetMon 了，这时候我惊喜的发现，FastNetMon 根本起！不！来！&lt;/p&gt;

&lt;p&gt;通过日志可以看到：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;2016-06-03 22:31:08,966 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] pfring_open error: No such device &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pf_ring not loaded or perhaps you use quick mode and have already a socket bound to: eth1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
2016-06-03 22:31:08,966 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] PF_RING initilization failed, &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;from programm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里又是 FastNetMon 那个安装脚本的一大坑。 它并没有安装成功 pf_ring 的 Kernel module，也没有将安装错误抛出来。&lt;/p&gt;

&lt;p&gt;如果通过命令&lt;code class=&quot;highlighter-rouge&quot;&gt;lsmod |grep pf_ring&lt;/code&gt;查找机器上已安装的 pf_ring ，会发现根本找不到。/proc/net 里也没有建立 pf_ring 的目录。&lt;/p&gt;

&lt;p&gt;所以我仔细排查了 fastnetmon 的安装日志 /tmp/fastnetmon_install.log，我发现日志里有这样的内容。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;We are calling &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: make -j 2 -C /tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel

make: Entering directory &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel&lt;span class=&quot;s1&quot;&gt;&#39;
********** WARNING WARNING WARNING **********
*
* Compiling PF_RING as root might lead you to compile errors
* Please compile PF_RING as unpriviliged user
*
*********************************************
make -C /lib/modules/2.6.32-573.22.1.el6.x86_64/build SUBDIRS=/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel EXTRA_CFLAGS=&#39;&lt;/span&gt;-I/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel -DSVN_REV&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;已导出 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39; modules
make: Entering an unknown directory
make: Leaving an unknown directory
make: Leaving directory `/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel&#39;&lt;/span&gt;
Command finished with code 512

We are calling &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: make -j 2 -C /tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel install

make: Entering directory &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel&lt;span class=&quot;s1&quot;&gt;&#39;
mkdir -p /lib/modules/2.6.32-573.22.1.el6.x86_64/kernel/net/pf_ring
cp *.ko /lib/modules/2.6.32-573.22.1.el6.x86_64/kernel/net/pf_ring
make: Leaving directory `/tmp/fastnetmon.build.dir.rwNsXhsTQt/PF_RING-6.0.3/kernel&#39;&lt;/span&gt;
Command finished with code 512

We are calling &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: rmmod pf_ring 2&amp;gt;/dev/null

Command finished with code 256

We are calling &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: modprobe pf_ring

Command finished with code 256&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，首先 pf_ring 在编译的时候有提示，不要用 root 进行编译，可能会导致失败，而且 make、make install 和 modprobe 命令的返回值也不是 0 ，说明编译和之后的安装都没有成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/shuai.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我只能自己编译一下 pf_ring 的 Kernel module。&lt;/p&gt;

&lt;p&gt;首先按照人家建议的，我们建一个普通用户 echo，然后找到日志中的编译临时目录，并赋给 echo 用户这个目录的读写权限。&lt;/p&gt;

&lt;p&gt;切换到 echo 用户 然后执行下面命令进行编译。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# su - echo
$ cd /tmp/fastnetmon.build.dir.lAVvYX7Htd/
$ ls
fastnetmon  PF_RING-6.0.3  PF_RING-6.0.3.tar.gz
$ rm -rf PF_RING-6.0.3
$ tar zxf  PF_RING-6.0.3.tar.gz
$ cd PF_RING-6.0.3/kernel/
$ make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好了，退出到这个用户，回到 root，执行安装：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make -C /tmp/fastnetmon.build.dir.lAVvYX7Htd/PF_RING-6.0.3/kernel install
modprobe pf_ring&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在执行 lsmod 就能看到这个 module 了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# lsmod |grep pf_ring&lt;/span&gt;
pf_ring               691861  2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在重新启动 fastnetmon，就能够成功启动了。&lt;/p&gt;

&lt;h2 id=&quot;ddos--fastnetmon&quot;&gt;3. 模拟 DDoS 攻击测试 FastNetMon&lt;/h2&gt;

&lt;p&gt;接下来我们测试 fastnetmon 是否能正确识别 DDoS 攻击。&lt;/p&gt;

&lt;p&gt;首先我们配置一下 FastNetMon 的通知脚本（&lt;a href=&quot;https://github.com/pavel-odintsov/fastnetmon/raw/master/src/notify_about_attack.sh&quot;&gt;下载脚本示例&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;将这个脚本复制为 /usr/local/bin/notify_about_attack.sh ，这是 fastnetmon.conf 文件中 notify_script_path 选项默认指定的通知脚本位置，并得给脚本赋执行权。&lt;/p&gt;

&lt;p&gt;编辑这个脚本，找到 ban 的条件语句，由于只是进行测试，我仅仅输出一条消息到 /tmp/ban.log 日志中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ &quot;$4&quot; = &quot;ban&quot; ]; then
    echo &quot;FastNetMon Guard: IP $1 blocked because $2 attack with power $3 pps&quot; &amp;gt;&amp;gt; /tmp/ban.log
    exit 0
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样通知脚本就配置好了。&lt;/p&gt;

&lt;p&gt;我使用一款叫做 iperf 的工具来模拟 DDoS 攻击，这个工具一般用于测试网络带宽，当然也可以通过大量发包模拟一次 DDoS 攻击。&lt;/p&gt;

&lt;p&gt;在 CentOS 上可以通过 yum 直接安装 iperf：&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install iperf&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;iperf -su&lt;/code&gt;命令启动 iperf 的服务器端。&lt;/p&gt;

&lt;p&gt;这里 -u 参数指明侦听 udp 端口。&lt;/p&gt;

&lt;p&gt;我将我的 mbp 作为攻击的发器端，同样安装 iperf ： &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install iperf&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在客户端上向服务器发起探测：&lt;code class=&quot;highlighter-rouge&quot;&gt;iperf  -u -c 10.1.2.137 -b 100M -P 5&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这时，在服务器上执行 FastNetMon 的客户端命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/fastnetmon/fastnetmon_clinet&lt;/code&gt;进行查看,可以看到出现如下信息。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FastNetMon v1.0 FastVPS Eesti OU &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VPS and dedicated: http://FastVPS.host
IPs ordered by: packets
Incoming traffic         42594 pps    491 mbps      0 flows
10.1.2.137               35552 pps    410 mbps      0 flows  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;banned&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

Outgoing traffic             1 pps	0 mbps      0 flows
10.1.2.137                   1 pps	0 mbps      0 flows  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;banned&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

Internal traffic             0 pps	0 mbps

Other traffic                0 pps	0 mbps

Screen updated &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;:              0 sec 191 microseconds
Traffic calculated &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;:          0 sec 7 microseconds
Total amount of not processed packets: 0
Packets received:	404792
Packets dropped:        0
Packets dropped:        0.0 %

Ban list:
10.1.2.137/35552 pps incoming at 04_06_16_00:40:13&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;因为之前我设置了攻击阈值为 200 pps，10 mb，目前的这个负载量已经远远超过我设定的阈值，被认为遭到了攻击。可以看到，目前 10.1.2.137 这个 IP 已经被拉进 Ban list 之中了。&lt;/p&gt;

&lt;p&gt;现在我们查看 FastNetMon 是否触发了通知，查看 /tmp/ban.log 这个日志，可以看到通知的消息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FastNetMon Guard: IP 10.1.2.137 blocked because incoming attack with power 293 pps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;FastNetMon 确实触发了通知的操作。&lt;/p&gt;

&lt;h2 id=&quot;fastnetmon--influxdb&quot;&gt;4. FastNetMon 集成 InfluxDB&lt;/h2&gt;

&lt;p&gt;InfluxDB 是一款开源的分布式时钟、事件和指标数据库。使用 Go 语言编写，它易于分布式和水平伸缩扩展。 InfluxDB 本身提供了非常简单易用的 HTTP API，因此它经常用于监控程序的后端数据存储，Grafana 对它就有非常好的支持。&lt;/p&gt;

&lt;p&gt;它有三大特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Time Series（时间序列）：你可以使用与时间有关的相关函数，如最大，最小，求和等。&lt;/li&gt;
  &lt;li&gt;Metrics（度量）：你可以实时对大量数据进行计算。&lt;/li&gt;
  &lt;li&gt;Eevents（事件）：它支持任意的事件数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先来安装 InfluxDB。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://dl.influxdata.com/influxdb/releases/influxdb-0.13.0.x86_64.rpm
yum localinstall influxdb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;编辑 InfluxDB 的配置文件 /etc/influxdb/influxdb.conf 中的 graphite 选项，按照如下配置：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;nn&quot;&gt;[[graphite]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;bind-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:2003&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tcp&quot;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;consistency-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;


  &lt;span class=&quot;err&quot;&gt;batch-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5000&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;batch-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1s&quot;&lt;/span&gt; 
  &lt;span class=&quot;s&quot;&gt;separator = &quot;.&quot;&lt;/span&gt;

  &lt;span class=&quot;py&quot;&gt;templates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&quot;fastnetmon.hosts.*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;app.measurement.cidr.direction.function.resource&quot;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&quot;fastnetmon.networks.*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;app.measurement.cidr.direction.resource&quot;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&quot;fastnetmon.total.*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;app.measurement.direction.resource&quot;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在就可以启动 InfluxDB 了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/init.d/influxdb start&lt;/span&gt;
Starting the process influxdb &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; OK &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
influxdb process was started &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; OK &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;同样，需要在 FastNetMon 的配置文件 /etc/fastnetmon.conf 里做一些配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;graphite = on
graphite_host = 127.0.0.1
graphite_port = 2003
graphite_prefix = fastnetmon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后重启 FastNetMon:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/fastnetmon restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等待几秒，接下来登录 Influxdb shell，查看数据库里是否有数据了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# influx
Visit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.
Connected to http://localhost:8086 version 0.13.0
InfluxDB shell version: 0.13.0
&amp;gt; show databases
name: databases
---------------
name
graphite
_internal

&amp;gt; use graphite
Using database graphite
&amp;gt; show measurements
name: measurements
------------------
name
fastnetmon.10_1_2_137.incoming.flows
fastnetmon.10_1_2_137.incoming.mbps
fastnetmon.10_1_2_137.incoming.pps
fastnetmon.10_1_2_137.outgoing.flows
fastnetmon.10_1_2_137.outgoing.mbps
fastnetmon.10_1_2_137.outgoing.pps
fastnetmon.172_26_1_1.incoming.flows
fastnetmon.172_26_1_1.incoming.mbps
fastnetmon.172_26_1_1.incoming.pps
fastnetmon.172_26_1_1.outgoing.flows
fastnetmon.172_26_1_1.outgoing.mbps
fastnetmon.172_26_1_1.outgoing.pps
fastnetmon.incoming.mbps
fastnetmon.incoming.pps
fastnetmon.incomingflows
fastnetmon.outgoing.mbps
fastnetmon.outgoing.pps
fastnetmon.outgoingflows

&amp;gt; select * from &quot;fastnetmon.incoming.pps&quot; order by time desc limit 10
name: fastnetmon.incoming.pps
-----------------------------
time			value
1465079546000000000	0
1465079545000000000	0
1465079544000000000	3
1465079543000000000	0
1465079542000000000	2
1465079541000000000	0
1465079540000000000	0
1465079539000000000	0
1465079538000000000	0
1465079537000000000	0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，在 graphite 这个数据库里，FastNetMon 已经自动创建了一些表，而且在表里已经有写入的数据了。&lt;/p&gt;

&lt;p&gt;在 InfluxDB 里，有些概念是与传统数据库不同的。在它的每张表（在 InfluxDB 中称为 measurement）里，并没有固定的字段，所以你不需要在前期先设计表的结构。&lt;/p&gt;

&lt;p&gt;表中的每条记录（在 InfluxDB 中称为 points），由时间戳（time）、数据（field）、标签（tags）组成。 每条 points 都要至少包含一个 field。&lt;/p&gt;

&lt;p&gt;如果一条记录插入进来，即使在表中没有这个 tags 或 field 的时候，它也会自动添加这个字段。&lt;/p&gt;

&lt;p&gt;InfluxDB 官方介绍说，在 InfluxDB 的数据库中，可能会有百万计的表。它提供了一个非常强大的特性，支持通过 Go 语言风格的正则表达式对 measurement 进行查询。这对后面我们生成 Grafana 的图表非常有用。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; select * from /fastnetmon.*\.incoming\.pps/ order by time desc limit 3
name: fastnetmon.incoming.pps
-----------------------------
time			value
1465083127000000000	3
1465083126000000000	0
1465083125000000000	0

name: fastnetmon.172_26_1_1.incoming.pps
----------------------------------------
time			value
1465083127000000000	0
1465083126000000000	0
1465083125000000000	0

name: fastnetmon.10_1_2_137.incoming.pps
----------------------------------------
time			value
1465083127000000000	3
1465083126000000000	0
1465083125000000000	0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样可以获取到 FastNetMon 中所有进站流量的 pps,而无需确切知道镜像来的流量中一共有多少个目的 IP 地址。&lt;/p&gt;

&lt;p&gt;InfluxDB 不仅提供了 shell ，同时也提供了 WEB 管理接口（端口 8083）和 HTTP API 接口（端口 8086）。接下来，我将配置 Grafana 与它的 HTTP API 端口进行交互。&lt;/p&gt;

&lt;h2 id=&quot;grafana&quot;&gt;5. 安装配置 Grafana&lt;/h2&gt;

&lt;p&gt;Grafana 目前已经&lt;a href=&quot;http://grafana.org/blog/2016/05/11/grafana-3-0-stable-released.html&quot;&gt;更新到 3.0 &lt;/a&gt;版本了，新增了许多特性。哈哈，好激动，我终于可以把 Kibana 难看的图表给扔掉了。&lt;/p&gt;

&lt;p&gt;使用下面的命令下载安装 Grafana:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install https://grafanarel.s3.amazonaws.com/builds/grafana-3.0.4-1464167696.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;话不多说，直接启动吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/init.d/grafana-server start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;浏览器打开 Grafana（端口默认 3000），默认用户是 admin, 密码 admin。&lt;/p&gt;

&lt;p&gt;首先点击左上角 Logo，添加数据源,添加 InfluxDB 的配置信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-datasource.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填好之后，点击下方的&lt;code class=&quot;highlighter-rouge&quot;&gt;Save and Test&lt;/code&gt;按钮，如果显示 Success ，说明已经可以连到 InfluxDB 了。&lt;/p&gt;

&lt;p&gt;然后转到 Dashboard ，新建一个 Dashboard。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-dash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Dashboard 里新建一个 Panel。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-single-new.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 Metrics 标签中的 SQL 语句。在 FROM 一行中，点击 select measurement ，选择 fastnetmon.incoming.pps,可以看到上方 Panel 中的数值已经变化了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-single-metrics.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在数据已经设置好了，你可以选择在 General 标签设置标题，Options 标签设置样式，修改成你喜欢的样子。&lt;/p&gt;

&lt;p&gt;然后我们以同样的方式新建一排 Singlestat 的 Panel ，分别对应 incoming 和 outgoing 的 pps 和 mpbs。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-single-row.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来新建一行，新建两张分别对应 pps 和 mbps 的图表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-graph-new.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这次数据的设置里，同样在 select meatruement 的地方，可以使用上一节我讲到的正则表达式，查询所有关于 pps 表的正则表达式 &lt;code class=&quot;highlighter-rouge&quot;&gt;/fastnetmon.*\.pps/&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-graph-metrics.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后同样另建一张查询所有 mpbs 表的图。&lt;/p&gt;

&lt;p&gt;至此，我们的 Dashboard 就算新建完成了。&lt;/p&gt;

&lt;p&gt;这时候，我再通过 iperf 模拟发起一次攻击，看一下 Grafana 的效果。还是很漂亮的嘛。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/grafana-attack.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天这篇帖子就讲完了，不知道你是不是已经学会使用 FastNetMon 集成 Grafana 搭建这个 DDoS 安全预警平台了，如果你有任何想法，欢迎你与我交流。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;https://github.com/pavel-odintsov/fastnetmon/blob/master/docs/INSTALL.md&lt;/p&gt;

&lt;p&gt;https://github.com/pavel-odintsov/fastnetmon/blob/master/docs/INFLUXDB_INTEGRATION.md&lt;/p&gt;

&lt;p&gt;https://docs.influxdata.com/influxdb/v0.13/introduction/getting_started/&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/06/03/use-fastnetmon-and-grafana-to-build-a-graphical-ddos-early-warning-system/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/06/03/use-fastnetmon-and-grafana-to-build-a-graphical-ddos-early-warning-system/</guid>
        
        <category>安全</category>
        
        <category>运维</category>
        
        
      </item>
    
      <item>
        <title>打造基于 ShadowSocks + ProxyChains 的全栈式科学上网工具</title>
        <description>&lt;p&gt;最近不知道为什么，&lt;a href=&quot;https://www.getlantern.org&quot;&gt;蓝灯（Lantern）&lt;/a&gt;用着经常出问题，要么非常慢，要么报错。&lt;/p&gt;

&lt;p&gt;说实话 Lantern 正常的时候，真是要比我放在东京的 SS (ShadowSocks) VPS 快出很多的。看片一点都不费劲。&lt;/p&gt;

&lt;p&gt;没办法之下，我切换回了 SS。还好我之前配置的 SS 直接可以拿来用，自动更新脚本也一直运行着。在这里记录一下我之前 Mac 配置 SS 等相关翻墙工具的过程。&lt;/p&gt;

&lt;p&gt;你可能会疑惑，我写的全栈式科学上网工具是什么？&lt;/p&gt;

&lt;p&gt;好吧，其实，我就是一个标题党……&lt;/p&gt;

&lt;p&gt;我们知道，ShadowSocks 主要用于浏览网页，也可以用于一些支持 Socks 代理的应用（比如 Dropbox）。但是如果想让命令行工具也走 SS 代理，虽然也可以打开 SS 的全局模式临时用一下，但是如果命令执行的时间过长，在全局模式下还是很影响上网体验的。&lt;/p&gt;

&lt;p&gt;所以，我今天所谓的全栈式科学上网不仅包括 SS 的配置，也包括了命令行代理工具 ProxyChains 的配置部分，以及如何自动更新 GFWList 。只要照着配下来，以后基本就不用再折腾翻墙的事了。&lt;/p&gt;

&lt;h2 id=&quot;ss-&quot;&gt;SS 的原理&lt;/h2&gt;

&lt;p&gt;我推荐 vc2tea 的这篇介绍原理的文章：&lt;a href=&quot;http://vc2tea.com/whats-shadowsocks/&quot;&gt;写给非专业人士看的 Shadowsocks 简介&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;shadowsocks-server-&quot;&gt;ShadowSocks Server 端的搭建&lt;/h2&gt;

&lt;p&gt;嗯，SS 搭服务器是蛮简单的，前提是你要有一台国外的 VPS 来做中转。 VPS 我个人之前一直在用 &lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt;，当年觉得它每月 $5 的 VPS 实在是便宜。不过感觉近些年大家都在降价，DO 现在没有什么价格优势了。而且我测试过 DO 各机房到我家（北京联通）的网络质量，普遍不佳，最终矬子里拔大个，选了 Toronto 机房，网络质量相比其他机房稍微好一点。&lt;/p&gt;

&lt;p&gt;最近看到 AWS 的推广，可以有 12 个月的免费体验，我又注册了 AWS ，暂停了 DO 的 VPS 。 AWS 的东京机房到我这的网络质量还蛮不错，至少比 DO 强太多了。&lt;/p&gt;

&lt;p&gt;下面简单介绍一下在 VPS 上如何装 ShadowSocks Server 端。&lt;/p&gt;

&lt;p&gt;安装依赖。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install build-essential autoconf libtool libssl-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下载并编译安装。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/shadowsocks/shadowsocks-libev.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;shadowsocks-libev/
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/shadowsocks
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;启动 ShadowSocks Server 。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/shadowsocks/bin/ss-server -p 10080 -k password -m aes-256-cfb --fast-open -f /tmp/shadowsocks.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我指定的端口是 10080，密码是 password，加密方式是 aes-256-cfb，这几项信息在 SS 客户端中都是要填的。&lt;/p&gt;

&lt;h2 id=&quot;shadowsocks-&quot;&gt;ShadowSocks 客户端的配置&lt;/h2&gt;

&lt;p&gt;略。就照着上面服务器的信息配置就行了。&lt;/p&gt;

&lt;p&gt;当你把客户端配置好，现在就可以在浏览器中体验科学上网了。&lt;/p&gt;

&lt;h2 id=&quot;proxychains-&quot;&gt;ProxyChains 的配置&lt;/h2&gt;

&lt;p&gt;如我们之前所说的，浏览器科学上网只是一部分，身为一名工程师或非 Windows 用户，我们经常会使用到一些命令行工具，想让命令行工具科学上网肿么办？&lt;/p&gt;

&lt;p&gt;ProxyChains 就是一个这样用途的工具，它可以让你的其它工具通过 Socks 或 HTTP 代理访问网络。&lt;/p&gt;

&lt;p&gt;首先从 Homebrew 安装 ProxyChains。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install proxychains-ng&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后做一些配置，它默认会读取安装目录下的 etc/proxychains.conf 配置文件，因为我想跟我其它的 dotfiles 一同管理，所以我把它放在了 ~/.proxychains.conf ,其文件内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strict_chain
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000
localnet 127.0.0.0/255.0.0.0
quiet_mode
[ProxyList]
socks5  127.0.0.1 1080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;需要说明一点，在这里我配置的是 strict_chain。如果你有多重代理，类似我之前一样，比如让命令先通过 Lantern 代理出去，如果失败再走 SS 代理，可以配置成 dynamic_chain 模式。不过这超出今天的文章范畴了，我还是以 strict_chain 举例，如果你对 dynamic_chain 感兴趣，可以自行研究。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;因为指定了配置文件的路径，为了方便使用，我在 ~/.zshrc 里加一行 alias。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proxychains4 -f ~/.proxychains.conf&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.zshrc&lt;/code&gt; 重新加载环境变量之后，就可以尝试是否配置成功了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pc curl https://twitter.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;gfwlist&quot;&gt;自动更新 GFWList&lt;/h2&gt;

&lt;p&gt;ShadowSocks 客户端自带有从 GFWList 更新 PAC 的功能，但是由于某个你懂的原因，自动更新基本都是失败的。&lt;/p&gt;

&lt;p&gt;不过没关系，你可以下载这个&lt;a href=&quot;https://raw.githubusercontent.com/echohn/shadowsocks-alfred-workflow/master/update_gfwlist.sh&quot;&gt;update_gfwlist.sh 脚本&lt;/a&gt;来进行更新 GFWList 。&lt;/p&gt;

&lt;p&gt;这个脚本的来源我忘记了，我只记得是之前我研究管理 dotfiles 的时候，从别人的 repo 里拷过来的。&lt;/p&gt;

&lt;p&gt;我把这个脚本放在 ~/.ShadowsocksX/ 目录下，这样可以它随着我的 mackup 一同备份到 Dropbox 上了。&lt;/p&gt;

&lt;p&gt;对了，别忘了给这个脚本赋执行权。&lt;/p&gt;

&lt;p&gt;然后在 crontab 里添加一行计划任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30 9 * * * /Users/Echo/.ShadowsocksX/update_gfwlist.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样，每天早上 GFWList 会自动更新，你不用再去管它。&lt;/p&gt;

&lt;h2 id=&quot;gfwlist-1&quot;&gt;手动添加域名至 GFWList&lt;/h2&gt;

&lt;p&gt;可能会有这种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;哪天上网的时候，突然发现想要访问的网站直连非常慢，希望通过 ss 进行代理访问。&lt;/li&gt;
  &lt;li&gt;发现这个网站被墙了，但是还没收录在 GFWList 里。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;碰上以上这两种情况，你可以自己编辑 ~/.ShadowsocksX/user-rule.txt 文件。把每个网站的域名作为一行记录添加进去，再执行一次 update_gfwlist.sh 脚本以更新到 ShadowsSocks。这样做比直接在 gfwlist.js 里加记录要好一点，因为下次 GFWList 更新的时候，不会把你自己收录的域名覆盖掉。&lt;/p&gt;

&lt;h2 id=&quot;shadowsocks--alfred-workflow&quot;&gt;ShadowSocks 的 Alfred Workflow&lt;/h2&gt;

&lt;p&gt;如果你是 小帽子 &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;Alfred&lt;/a&gt; 的用户，你可以直接使用我写的 &lt;a href=&quot;https://github.com/echohn/shadowsocks-alfred-workflow/raw/master/shadowsocks.alfredworkflow&quot;&gt;ShadowSocks-Workflow(点击下载)&lt;/a&gt;。在 Alfred 中执行 ssadd ，然后粘贴你准备加入 gfwlist 的 url，url 的域名就添加进 ShadowScoks 了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ss.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我的全栈式科学上网工具就配置完了。现在不论是浏览器应用还是命令行，都实现了科学上网的功能，又提供了方便快捷的更新方式，对我来说，已经足够应付日常使用了。&lt;/p&gt;

&lt;p&gt;如果你使用了其他好的工具与方法科学上网，也非常欢迎你与我交流。&lt;/p&gt;

</description>
        <pubDate>Sun, 29 May 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/05/29/to-build-the-fullstack-tools-for-over-the-wall/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/05/29/to-build-the-fullstack-tools-for-over-the-wall/</guid>
        
        <category>Mac</category>
        
        <category>科学上网</category>
        
        <category>ShadowSocks</category>
        
        <category>Alfred</category>
        
        
      </item>
    
      <item>
        <title>Bash 风格指南中文版</title>
        <description>&lt;p&gt;今天下午整理了一下自己 GitHub 的 starred project，正巧看到以前收藏的一篇 &lt;a href=&quot;https://github.com/bahamas10/bash-style-guide.git&quot;&gt;Bash Style Guide&lt;/a&gt;, 闲来无事，就给翻译了。&lt;/p&gt;

&lt;p&gt;这篇文章很好，他基于的那篇 Wiki 也非常值得看，我阅读之后，确实感到有一些东西是自己曾经忽视了的。&lt;/p&gt;

&lt;p&gt;下面是我翻译的文章，如发现错误，还望及时告知。&lt;/p&gt;

&lt;h1 id=&quot;bash-&quot;&gt;Bash 风格指南&lt;/h1&gt;

&lt;p&gt;本风格指南旨在描述如何编写 bash 脚本，并使其安全和可预测。本指南基于 &lt;a href=&quot;http://mywiki.wooledge.org&quot;&gt;this wiki&lt;/a&gt;，特别是这个页面：&lt;/p&gt;

&lt;p&gt;http://mywiki.wooledge.org/BashGuide/Practices&lt;/p&gt;

&lt;p&gt;如本指南中有任何东西并未明确提出，则默认遵循这个 wiki 中所描述的观点。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;美学&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;使用制表符还是空格&lt;/h3&gt;

&lt;p&gt;制表符&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;分号&lt;/h3&gt;

&lt;p&gt;你无需在命令行中使用分号（我希望是这样），同样也不要在脚本中使用它。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dave&#39;&lt;/span&gt;;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;;

&lt;span class=&quot;c&quot;&gt;#right&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dave&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-3&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;不要使用关键字 &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; 创建函数。所有函数中创建的变量都应该声明为局部变量。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;foo &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;foo &lt;span class=&quot;c&quot;&gt;# this is now global, wrong&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;foo &lt;span class=&quot;c&quot;&gt;# this is local, preferred&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码块声明&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; 应与 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 放在同一行，&lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; 应与 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 放在同一行。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# also wrong, though admittedly looks kinda cool&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-5&quot;&gt;间距&lt;/h3&gt;

&lt;p&gt;不要超过两个连续的换行符（即不超过一行空行）。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;注释&lt;/h3&gt;

&lt;p&gt;注释没有明确的代码风格。除非你重写或者更新注释内容，否则不要因为美观的因素去改动它。&lt;/p&gt;

&lt;h2 id=&quot;bash--1&quot;&gt;Bash 主义&lt;/h2&gt;

&lt;p&gt;本风格指南用于 bash。这意味着，如果可以选择，使用 bash 的内建命令或关键字，总是好于外部命令或&lt;code class=&quot;highlighter-rouge&quot;&gt;sh(1)&lt;/code&gt;的语法。&lt;/p&gt;

&lt;h3 id=&quot;test1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test(1)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[ ... ]]&lt;/code&gt; 进行条件测试, 而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ .. ]&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;test ...&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -d /etc

&lt;span class=&quot;c&quot;&gt;# also wrong&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d /etc &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# correct&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -d /etc &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;查看 http://mywiki.wooledge.org/BashFAQ/031 了解更多信息。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;队列&lt;/h3&gt;

&lt;p&gt;使用 bash 的内部命令生成队列。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10

&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;seq 1 5&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;seq 1 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0; i &amp;lt; n; i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-8&quot;&gt;命令替换&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$(...)&lt;/code&gt; 进行命令替换.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-9&quot;&gt;数学 / 整数操作&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;((...))&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;$((...))&lt;/code&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4

&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; -gt &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;a &amp;gt; b&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;不要&lt;/strong&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;参数扩展&lt;/h3&gt;

&lt;p&gt;使用&lt;a href=&quot;http://mywiki.wooledge.org/BashGuide/Parameters#Parameter_Expansion&quot;&gt;参数扩展&lt;/a&gt;要好于使用外部命令，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 等等。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bahamas10&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nonumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | sed -e &lt;span class=&quot;s1&quot;&gt;&#39;s/[0-9]//g&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nonumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//[0-9]/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-11&quot;&gt;列出文件&lt;/h3&gt;

&lt;p&gt;不要使用 &lt;a href=&quot;http://mywiki.wooledge.org/ParsingLs&quot;&gt;解析 ls(1)&lt;/a&gt;，而使用 bash 内置函数来循环文件。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# very wrong, potentially unsafe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ls&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-12&quot;&gt;查明可执行文件路径&lt;/h3&gt;

&lt;p&gt;简单声明一点，你肯定不知道，如果你视图找出可执行程序的完整路径，你应该反思你的软件设计了。&lt;/p&gt;

&lt;p&gt;查看 http://mywiki.wooledge.org/BashFAQ/028 获取更多信息。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;数组和列表&lt;/h3&gt;

&lt;p&gt;只要有可能，尽量使用 bash 数组来代替使用空格（或是换行符、制表符等）分隔的字符串。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;json httpserver jshint&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;module &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$modules&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;npm install -g &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$module&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;json httpserver jshint&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;module &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;npm install -g &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$module&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-14&quot;&gt;内置读取&lt;/h3&gt;

&lt;p&gt;只要有可能，使用 bash 内置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 避免调用外部命令。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;fqdn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;computer1.daveeddy.com&#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;. &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;hostname domain tld &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fqdn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is in &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tld&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; &quot;computer1 is in daveeddy.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-15&quot;&gt;外部命令&lt;/h2&gt;

&lt;h3 id=&quot;gnu-&quot;&gt;GNU 用户工具&lt;/h3&gt;

&lt;p&gt;全世界不会都运行在 GNU 或 Linux 上；当调用外部命令时，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;，避免 GNU 特定的选项，使其尽量易于移植。&lt;/p&gt;

&lt;p&gt;当你编写 bash ，并且使用给你的所有强大工具和 bash 的内建命令时，你会发现甚至很少有机会需要调用外部命令。&lt;/p&gt;

&lt;h3 id=&quot;uuochttpwwwsmalloruhrdeawardhtml&quot;&gt;&lt;a href=&quot;http://www.smallo.ruhr.de/award.html&quot;&gt;UUOC&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;不要在你不需要的时候使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat(1)&lt;/code&gt;。如果程序支持从标准输入读取，使用 bash 重定向传递数据。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
cat file | grep foo

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
grep foo &amp;lt; file

&lt;span class=&quot;c&quot;&gt;# also right&lt;/span&gt;
grep foo file&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果我们能够推断，当程序说它可以通过名称读取文件，并且这样做能获得更好的性能时，我们可以使用这个内置读取文件方法的命令行工具，而不是标准输入。&lt;/p&gt;

&lt;h2 id=&quot;section-16&quot;&gt;风格&lt;/h2&gt;

&lt;h3 id=&quot;section-17&quot;&gt;引号&lt;/h3&gt;

&lt;p&gt;当字符串需要变量扩展或命令替换插值的时候使用双引号，其它时候使用单引号。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;You are &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# possibly wrong, depending on intent&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;You are $USER&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所有将要经历分词的变量都 &lt;em&gt;必须&lt;/em&gt; 被引用 (1)。如果分词不会发生，变量可以不加引号。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hello world&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -n &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 不需要引号 - [[ ... ]] 不会把变量分词&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# 需要印号&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 不需要引号 - 变量不会分词&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;唯一的例外是，如果代码或 bash 控制着这个变量的整个生命周期。这种情况 &lt;a href=&quot;https://github.com/bahamas10/basher&quot;&gt;basher&lt;/a&gt; 有类似的代码：&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;printf_date_supported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;%()T&#39;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;printf_date_supported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$printf_date_supported&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    ...
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在这个例子中，虽然在 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 声明中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$printf_date_supported&lt;/code&gt; 将经历分词，但仍然不需要引号，因为这个变量的内容被明确地控制着，并不会从用户或其它命令里取值。&lt;/p&gt;

&lt;p&gt;同样的，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;这些变量，也不需要引号，因为他们绝不会包含空格、制表符或换行符。&lt;/p&gt;

&lt;p&gt;然而，如果仍怀有疑问，可以查看&lt;a href=&quot;http://mywiki.wooledge.org/Quotes&quot;&gt;引用所有的扩展&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;变量声明&lt;/h3&gt;

&lt;p&gt;避免大写的变量名，除非有一个很好的理由使用他们。不要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt; 创建变量。&lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 应该&lt;em&gt;只用于&lt;/em&gt;关联数组。在函数中，应&lt;em&gt;始终&lt;/em&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt; 声明变量。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; -i &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5
&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;foo++
&lt;span class=&quot;nb&quot;&gt;readonly &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;something&#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FOOBAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;baz

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5
&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;i++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;something&#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;baz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;shebang&quot;&gt;shebang&lt;/h3&gt;

&lt;p&gt;Bash 不总是位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;，因此尽量这样来写这一行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-19&quot;&gt;错误检查&lt;/h3&gt;

&lt;p&gt;举个例子，&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 不总是工作。请务必检查 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;（或类似的命令）任何可能的错误，如果错误存在就退出或将错误抛出。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /some/path &lt;span class=&quot;c&quot;&gt;# 可能会失败&lt;/span&gt;
rm file       &lt;span class=&quot;c&quot;&gt;# 如果 cd 失败我在哪？我删除了什么？&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# right&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /some/path &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;rm file&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;set--e&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -e&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;不要设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;errexit&lt;/code&gt;。如同在 C 语言中，有时你想要得到一个错误，或是你期望什么执行失败，并不意味着你想要退出程序。&lt;/p&gt;

&lt;p&gt;http://mywiki.wooledge.org/BashFAQ/105&lt;/p&gt;

&lt;h3 id=&quot;eval&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;永远不要使用.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;没有人会在代码库中接受下面这个链接列出的东西。&lt;/p&gt;

&lt;p&gt;http://mywiki.wooledge.org/BashPitfalls&lt;/p&gt;

&lt;p&gt;这里也例举了一些如何修复这些问题的例子。&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT License&lt;/p&gt;

</description>
        <pubDate>Sat, 21 May 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/05/21/bash-style-guide-cn/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/05/21/bash-style-guide-cn/</guid>
        
        <category>Bash</category>
        
        
      </item>
    
      <item>
        <title>如何在 Mac 上管理你经常变化的服务器列表？</title>
        <description>&lt;p&gt;相比传统运维「日久不变」的服务器运维，步入云时代之后，虚拟机创建和销毁频率比之前不知高了多少个量级，原本几年前想象中的可以根据日常负载自动添加机器什么的，已经完全变成了现实。现在想要找几台机器搭个小架构测试点什么东西，也不必像从前那样拉网线改 BIOS 装系统初始化一忙一上午了。&lt;/p&gt;

&lt;p&gt;所以，如果工程师们还是按照原有的传统运维理念去进行运维，基本上就是嫌自己不够忙作死了。&lt;/p&gt;

&lt;p&gt;虽然我非常认同云时代不登录虚拟机运维的理念（注1），但是我们单位目前还做不到如此高效的自动化，我们还是经常需要登服务器看看的。&lt;/p&gt;

&lt;p&gt;注1：具体出处是看过的某一个技术视频，标题忘记了，主要是说在版本上线之前做好自动化，版本与虚拟机状态版本相对应，应用版本的切换就对应着上个版本的虚拟机销毁，下个版本虚拟机创建的过程，上线之后不给运维工程师登录服务器的权限，以防止误操作引起应用问题。&lt;/p&gt;

&lt;p&gt;面对经常变化的服务器列表，身为一个懒人，怎么不会想出一个途径自动地管理这些东西？&lt;/p&gt;

&lt;h2 id=&quot;saltmaster--id-&quot;&gt;1. 在 SaltMaster 上自动生成服务器 ID 列表&lt;/h2&gt;

&lt;p&gt;我们每台虚机在创建之后，都会分配到一个 Salt Minion ID，并连接到 SaltMaster 进行自身的配置变更。&lt;/p&gt;

&lt;p&gt;利用这一点，SaltMaster 上是最清楚机器的实际变化了。&lt;/p&gt;

&lt;p&gt;所以这里很简单，定期在 SaltMaster 上生成一份 Minions ID 列表，并放在本地的 HTTP 服务上提供下载。&lt;/p&gt;

&lt;p&gt;我在 SaltMaster 上也做了一份对 salt 命令的 ZSH 补全规则。这样我本地执行 salt 命令就能自动补全常用命令和 ID 啦。&lt;/p&gt;

&lt;p&gt;补全脚本是酱婶儿的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; cat ~/.zsh/completion/_salt

&lt;span class=&quot;c&quot;&gt;#compdef salt&lt;/span&gt;
_arguments  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;1:keys:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ruby -ryaml -e &lt;span class=&quot;s1&quot;&gt;&#39;puts YAML.load(IO.read(&quot;/var/www/html/salt_keys.yml&quot;))[&quot;minions&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;2:commands:(test.ping cmd.run cmd.all cmd.exec_code state.sls pip.install saltutil.kill_job cp.get_file cp.get_dir)&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;id--hosts-&quot;&gt;2. 本地根据网络和计划任务定时下载 ID 列表自动更新到自己的 hosts 文件&lt;/h2&gt;

&lt;p&gt;有了服务器提供的 ID 列表，本地下载读取更新自己的 hosts 文件就可以啦。&lt;/p&gt;

&lt;p&gt;不过，我 Mac 的 hosts 有一些我的云主机、常用公网服务器配置，要自动更新 hosts 文件可以，可不能把我自己的配置给覆盖了，因此我在 hosts 文件里添加了一行特殊的注释行，为了分隔开我自己的 hosts 和自动生成的 hosts。&lt;/p&gt;

&lt;p&gt;我平时要抱着我的 MBP 跑来跑去，不是所有时间都能连到运维网络上的。如果能根据我在哪判断出要不要连服务器下载 ID 列表岂不是很酷？其实可以使用 Mac 的网络位置非常容易的实现这个功能。&lt;/p&gt;

&lt;p&gt;Mac 的网络位置是一个 Apple 自带的功能，你可以在 Mac 上任意设置你处在的不同网络配置，包括 IP 地址、网卡、DNS、WIFI 网络的优先级、VPN等等。配合 Alfred 快速切换网络位置的 Workflow，非常适合我这种经常处于家、办公网、运维网、VPN、设备调试网络等各种网络之间游荡的人。&lt;/p&gt;

&lt;p&gt;所以我在脚本里增加了对网络的判断，当我处于 office_production 和 office_vpn 的网络位置就会下载 Salt Minion ID 文件。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open-uri&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yaml&#39;&lt;/span&gt;

&lt;span class=&quot;vg&quot;&gt;$location_title_regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/office_(production|vpn)/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;salt_file_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://xxx.xx.xx.xx/salt_keys.yml&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in_the_location?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current_location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`/usr/sbin/scselect`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^ \*\s+[\w\-]+\s+\((.*)\)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$location_title_regexp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;download_and_parse_salt_keys_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:open_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;minions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cannot download the Salt Key Files.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_to_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t\t\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[\w\-]+\-(\d+\.\d+\.\d+\.\d+)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_myself_hosts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/etc/hosts&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;my_self_hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/##### Auto Generate id: (\d+)/&lt;/span&gt;
      &lt;span class=&quot;vg&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;my_self_hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;my_self_hosts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_the_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;##### Auto Generate id: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_generate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_to_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/etc/hosts&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_location?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;salt_hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_and_parse_salt_keys_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salt_file_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;auto_generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_to_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salt_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_myself_hosts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hosts_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_the_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_to_hosts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hosts_lines&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在，只有把这个脚本扔在计划任务里，每个小时自动跑上一次就好啦。&lt;/p&gt;

&lt;h2 id=&quot;ssh-&quot;&gt;3. SSH 客户端的登录简化&lt;/h2&gt;

&lt;p&gt;因为我们这服务器的安全级别不同，也有很多历史遗留原因，造成很多不同业务系统的服务器登录用户，key、密码都是不同的，要一一记住这些，对我来说也是蛮烦的一件事。不过可以通过 ~/.ssh/config 文件对 ssh 客户端进行自动匹配，从而简化还要想用户名、用哪个 key 这样的操作。&lt;/p&gt;

&lt;p&gt;这个文件大致是这样的：&lt;/p&gt;

&lt;p&gt;在 Host 设置中可以使用通配符，这里是我服务器的 Salt Minion ID。因为我们 Salt Minion ID 的规则是从左自右依次减小范围的，所以写成&lt;code class=&quot;highlighter-rouge&quot;&gt;ops-*&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;User 设置登录用户，Port 设置端口，IdentifiFile 设置你要登录使用的 ssh key。&lt;/p&gt;

&lt;p&gt;Host * 是默认配置，在这里可以使用 ControlMaster 选项设置 ssh 共享多个连接，只要连接文件（ControlPath 中定义）存在且服务器没有主动断开，你就可以一直不用密码地快速访问啦。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host ops-*
  User ops


Host app1-*
  User app1user
  Port 22
  IdentityFile ~/.ssh/id_app1_serverkey


Host app2-*
  User app2user
  Port 30022
  IdentityFile ~/.ssh/id_app2_serverkey

Host *
  User root
  Port 22
  CheckHostIP yes
  Compression yes
  ForwardAgent yes
  IdentityFile ~/.ssh/id_rsa
  ControlMaster auto
  ControlPath ~/.ssh/%h-%p-%r
  ControlPersist 4h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;zsh-&quot;&gt;4. ZSH 的自动补全&lt;/h2&gt;

&lt;p&gt;在这里我使用的是 oh-my-zsh 的自动 ssh 补全，本身没有做任何修改。&lt;/p&gt;

&lt;p&gt;好啦，上述都配置好了之后，就可以不用再每天想着登服务器的时候发现IP、用户名、端口、ssh key 不对怎么办啦，不用再辛苦的去问同事哪里做了变更，还要再自己维护这些信息了。&lt;/p&gt;

&lt;p&gt;有这时间，喝一杯咖啡，看看知乎岂不是更好。&lt;/p&gt;

</description>
        <pubDate>Sun, 15 May 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/05/15/how-to-manage-your-servers/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/05/15/how-to-manage-your-servers/</guid>
        
        <category>运维</category>
        
        
      </item>
    
      <item>
        <title>谁离开了，谁还在？</title>
        <description>&lt;p&gt;今天想联系某个同事时，没找到他的电话，忽然发现我已经很久没有更新单位的通讯录了。&lt;/p&gt;

&lt;p&gt;于是，下午不忙的时候，找出来以前写的导出单位通讯录的程序，从 OA 上下载了目前最新的通讯录。&lt;/p&gt;

&lt;p&gt;在与自己的通讯录合并之前，突然想到，很久没用过了，还是比较一下差异吧。&lt;/p&gt;

&lt;p&gt;随着键盘几个简单的敲击，屏幕中突然出现了一大片或熟悉、或陌生的名字……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我在 2012 年 9 月加入这家单位。&lt;/p&gt;

&lt;p&gt;我还记得在上一家公司接到丽娜的电话，啊？事业单位？你没弄错吧，我是做游戏的……&lt;/p&gt;

&lt;p&gt;我还记得刚入职的时候对这里到处都充满了好奇，那么多工会活动，还给钱……打完球之后总是被大睿拉着砸地摊子喝酒撸串，总是把我名字记错的门卫大爷，听着那些认识或不认识人的八卦……&lt;/p&gt;

&lt;p&gt;突然有一天，我特别高兴，因为我能叫出所有人的名字啦！我写程序把单位 Excel 的通讯录转成 VCard，再把 VCard 跟好多熟悉的人分享……&lt;/p&gt;

&lt;p&gt;偶尔食堂吃饭的时候，我也偷偷打量没见过的新人。跟部门的弟兄一起，看脸看胸看腿看屁股，他们告诉我，她叫什么，是哪个部门的。&lt;/p&gt;

&lt;p&gt;可是渐渐地，所有人似乎变得都很忙很忙，再也聚不起一场球赛，再也没人组织一块儿聚餐，甚至，不知道从哪时起，就再也没见过那个人了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;当我看到终端滚出的那些熟悉的名字，心里突然有点柔软。&lt;/p&gt;

&lt;p&gt;看到它们，就仿佛看到了那些曾经一起加班、一起打球、一起开过玩笑、聊过心事的，却已经再也看不到了的身影。&lt;/p&gt;

&lt;p&gt;我把名单截图给博学看，博学说，「嗯，还有我的女神。」&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;可能生活就是这样，我们渐渐与一些人相遇，又与一些人分离。&lt;/p&gt;

&lt;p&gt;我还记得那天在楼下突然看到离职的安冬，她从远处走来，带着笑容，喊我的名字，一如昨日。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;偶尔就会缅怀。&lt;/p&gt;

&lt;p&gt;但是，也只是偶尔罢了。&lt;/p&gt;

&lt;p&gt;因为，非常非常幸运的，&lt;/p&gt;

&lt;p&gt;那些与我信念相同的兄弟们，&lt;/p&gt;

&lt;p&gt;仍与我并肩站在一起，&lt;/p&gt;

&lt;p&gt;从未离开。&lt;/p&gt;

</description>
        <pubDate>Wed, 11 May 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/05/11/who-were-left-who-were-stay/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/05/11/who-were-left-who-were-stay/</guid>
        
        <category>杂记</category>
        
        
      </item>
    
      <item>
        <title>「提问的智慧」读书笔记</title>
        <description>&lt;p&gt;周末休假在家，重读了「提问的智慧」，并按照自己的理解重新梳理了一下导图的结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/wit_of_ask.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本来我是想放图片上来的，可是即使压缩完，也太大了……&lt;/p&gt;

&lt;p&gt;你可以访问&lt;a href=&quot;https://github.com/echohn/smart-questions-mindmap/blob/master/提问的智慧.pdf&quot;&gt;这里&lt;/a&gt;阅读 PDF 版本。&lt;/p&gt;

</description>
        <pubDate>Mon, 09 May 2016 00:00:00 +0800</pubDate>
        <link>http://echohn.github.io/2016/05/09/smart-questions-mindmap/</link>
        <guid isPermaLink="true">http://echohn.github.io/2016/05/09/smart-questions-mindmap/</guid>
        
        <category>读书笔记</category>
        
        
      </item>
    
  </channel>
</rss>
